"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
–ü–æ–ª–Ω–∞—è –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import logging
from typing import List
from datetime import datetime

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config import TELEGRAM_TOKEN
from signal_generator import get_trading_signal_for_telegram
from tinkoff_client import TinkoffClient
from risk_manager import RiskManager, RiskSettings
from trading_engine import TradingEngine, TradingMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = TELEGRAM_TOKEN
        self.tinkoff_client = TinkoffClient()
        self.application = None
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trading Telegram Bot")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            user_name = update.effective_user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
            welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot MVP, {user_name}!**
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ SBER
‚Ä¢ `/accounts` - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚ö†Ô∏è –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ **–ø–µ—Å–æ—á–Ω–∏—Ü—ã** –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
üí∞ –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è
üß™ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ
üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã** `/status` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!
            """
            await update.message.reply_text(welcome_message, parse_mode="Markdown")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        try:
            help_message = """
üìã **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã Trading Bot MVP:**
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
üí∞ **–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ `/price TICKER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`)
‚Ä¢ `/accounts` - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚Ä¢ `/news TICKER` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Ä¢ `/analysis TICKER` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏
‚Ä¢ `/signal TICKER` - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
‚öñÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:**
‚Ä¢ `/risk TICKER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ `/portfolio` - –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ —Ä–∏—Å–∫–æ–≤
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
‚Ä¢ `/automation` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ `/scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
üìä **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/price GAZP` - —Ü–µ–Ω–∞ –ì–∞–∑–ø—Ä–æ–º–∞
‚Ä¢ `/price YNDX` - —Ü–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å–∞
‚Ä¢ `/news SBER` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ
‚Ä¢ `/analysis SBER` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/risk SBER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/portfolio` - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
üöÄ **–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:**
‚Ä¢ üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
‚Ä¢ üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD)
‚Ä¢ üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.
‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Å–æ—á–Ω–∏—Ü–µ!
            """
            await update.message.reply_text(help_message, parse_mode="Markdown")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API
            tinkoff_status = "‚ùå –û—à–∏–±–∫–∞"
            accounts_count = 0
            try:
                accounts = self.tinkoff_client.get_accounts()
                if accounts:
                    tinkoff_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                    accounts_count = len(accounts)
                    logger.info(f"Tinkoff API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}")
                else:
                    logger.warning("Tinkoff API: —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tinkoff API: {e}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            status_message = f"""
üîç **–°–æ—Å—Ç–æ—è–Ω–∏–µ Trading Bot MVP**
üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
{tinkoff_status} Tinkoff Invest API
üìä –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
üõ°Ô∏è –¢–∏–ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üîÑ –°—Ç–∞—Ç—É—Å: {'–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if accounts_count > 0 else '–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
üìà **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚è≥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ–π—á–∞—Å
            """
            if accounts_count == 0:
                status_message += (
                    "\n‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** " "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )
            await update.message.reply_text(status_message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /price TICKER - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`",
                    parse_mode="Markdown",
                )
                return
            ticker = context.args[0].upper()
            await update.message.reply_text(f"üîç –ò—â—É —Ü–µ–Ω—É –¥–ª—è {ticker}...")
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {ticker}")
            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument = self.tinkoff_client.search_instrument(ticker)
            if not instrument:
                await update.message.reply_text(f"‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä.")
                logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price_data = self.tinkoff_client.get_last_price(instrument.figi)
            if not price_data:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}")
                return
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_rub = price_data.price.units + price_data.price.nano / 1_000_000_000
            price_message = f"""
üí∞ **{instrument.name}**
üìä **–¶–µ–Ω–∞:** {price_rub:.2f} ‚ÇΩ
üéØ **–¢–∏–∫–µ—Ä:** {ticker}
üîó **FIGI:** `{instrument.figi}`
‚è∞ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: —Å–µ–π—á–∞—Å
üèõÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫: Tinkoff Invest API (–ø–µ—Å–æ—á–Ω–∏—Ü–∞)
            """
            await update.message.reply_text(price_message, parse_mode="Markdown")
            logger.info(f"–¶–µ–Ω–∞ {ticker} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {price_rub:.2f} ‚ÇΩ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ price: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {ticker_name}. " f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _get_sentiment_analysis(self, ticker: str, news_results: List) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ sentiment –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if len(news_results) > 0:
                from openai_analyzer import OpenAIAnalyzer

                analyzer = OpenAIAnalyzer()
                result = await analyzer.analyze_sentiment(ticker, news_results[:3])
                if result:
                    emoji_map = {
                        "STRONG_BUY": "üíö",
                        "BUY": "üü¢",
                        "HOLD": "üü°",
                        "SELL": "üü†",
                        "STRONG_SELL": "üî¥",
                    }
                    emoji = emoji_map.get(result.get("sentiment_label", "HOLD"), "‚ö™")
                    score = result.get("sentiment_score", 0.0)
                    summary = result.get("summary", "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return f"""
ü§ñ **–ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø AI:**
{emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {result.get("sentiment_label", "HOLD")}
üìä **–û—Ü–µ–Ω–∫–∞:** {score:.2f} (–æ—Ç -1.0 –¥–æ +1.0)
üìù **–ê–Ω–∞–ª–∏–∑:** {summary}
"""
        except Exception as e:
            logger.warning(f"OpenAI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {ticker}: {e}")
        return ""

    async def _format_news_result(self, ticker: str, news_results: List) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not news_results:
            return f"""üì∞ <b>–ù–û–í–û–°–¢–ò –ü–û {ticker}</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {ticker}
‚ùå –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –¢–∏–∫–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–∫–µ—Ä—ã: GAZP, YNDX, LKOH
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/price {ticker}</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
‚ö†Ô∏è <b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b> –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è."""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        sources = list(
            set(news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for news in news_results if news.get("source"))
        )
        sources_text = ", ".join(sources[:3])
        if len(sources) > 3:
            sources_text += f" –∏ –µ—â—ë {len(sources) - 3}"
        # –î–æ–±–∞–≤–ª—è–µ–º sentiment –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI
        sentiment_block = await self._get_sentiment_analysis(ticker, news_results)
        result_text = f"""üì∞ <b>–ù–û–í–û–°–¢–ò –ü–û {ticker}</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {ticker}
üîç <b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(news_results)}
‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> {sources_text}{sentiment_block}
üìã <b>–¢–û–ü-{min(3, len(news_results))} –ù–û–í–û–°–¢–ï–ô:</b>
"""
        for i, news in enumerate(news_results[:3], 1):
            title = news.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            summary = news.get("content", news.get("summary", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
            source = news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
            if len(title) > 80:
                title = title[:77] + "..."
            if len(summary) > 150:
                summary = summary[:147] + "..."
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            title_escaped = title.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            summary_escaped = (
                summary.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            )
            source_escaped = source.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            result_text += f"""<b>{i}. {title_escaped}</b>
üìù {summary_escaped}
üåê {source_escaped}
"""
        if len(news_results) > 3:
            result_text += f"üìã –ò –µ—â—ë {len(news_results) - 3} –Ω–æ–≤–æ—Å—Ç–µ–π...\n\n"
        result_text += f"""üïê <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {ticker} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- <code>/status</code> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚ö†Ô∏è <b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b> –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π."""
        return result_text

    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /accounts - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤"""
        try:
            await update.message.reply_text(
                "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö...", parse_mode="Markdown"
            )
            logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤")
            accounts = self.tinkoff_client.get_accounts()
            if not accounts:
                await update.message.reply_text(
                    "‚ùå **–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Tinkoff API\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API\n"
                    "‚Ä¢ –°—á–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/status` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    parse_mode="Markdown",
                )
                logger.warning("–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            accounts_message = f"üíº **–í–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞** ({len(accounts)} —à—Ç.)\n\n"
            for i, account in enumerate(accounts, 1):
                account_id = account.id
                account_name = account.name if account.name else f"–°—á–µ—Ç {i}"
                account_type = account.type.name if hasattr(account, "type") else "UNSPECIFIED"
                accounts_message += f"""
**üè¶ –°—á–µ—Ç {i}:**
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {account_name}
üÜî ID: `{account_id}`
üìã –¢–∏–ø: {account_type}
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞
---
                """
            accounts_message += f"""
‚úÖ **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:** {len(accounts)}
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
üí° **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/price SBER`
‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!
            """
            await update.message.reply_text(accounts_message, parse_mode="Markdown")
            logger.info(f"–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(accounts)} —Å—á–µ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ accounts: {e}")
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤**\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ `/status`",
                parse_mode="Markdown",
            )

    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /news TICKER - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üì∞ <b>–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/news TICKER</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ <code>/news SBER</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ\n"
                    "‚Ä¢ <code>/news GAZP</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –ì–∞–∑–ø—Ä–æ–º–µ\n"
                    "‚Ä¢ <code>/news YNDX</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –Ø–Ω–¥–µ–∫—Å–µ\n\n"
                    "ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                    "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3-7 —Å–µ–∫—É–Ω–¥",
                    parse_mode="HTML",
                )
                return
            ticker = context.args[0].upper()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_msg = await update.message.reply_text(
                f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –æ <b>{ticker}</b>...\n" f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ Perplexity AI...",
                parse_mode="HTML",
            )
            try:
                from perplexity_client import PerplexityClient

                perplexity = PerplexityClient()
                news_results = perplexity.search_ticker_news(ticker, hours=24)
                result_text = await self._format_news_result(ticker, news_results)
            except ImportError:
                result_text = f"""‚ùå <b>PERPLEXITY CLIENT –ù–ï –ù–ê–ô–î–ï–ù</b>
üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª <code>perplexity_client.py</code>
üí° –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- <code>/status</code> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º"""
            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ Perplexity API –¥–ª—è {ticker}: {api_error}")
                result_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô {ticker}</b>
üîç –ü—Ä–∏—á–∏–Ω–∞: {str(api_error)}
üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/status</code> –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä: GAZP, YNDX
üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞"""
            await loading_msg.edit_text(result_text, parse_mode="HTML")
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ news –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {ticker}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ news: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π {ticker_name}. " f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
            )

    async def risk_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /risk TICKER."""
        if not context.args:
            await update.message.reply_text(
                "‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/risk TICKER [–¶–ï–ù–ê_–í–•–û–î–ê] [–°–¢–û–ü_–õ–û–°–°]`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/risk SBER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ\n"
                "‚Ä¢ `/risk SBER 100 93` - –∞–Ω–∞–ª–∏–∑ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
                "üìä –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞\n"
                "‚Ä¢ –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞\n"
                "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        ticker = context.args[0].upper()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        loading_msg = await update.message.reply_text(
            f"‚öñÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∏—Å–∫–∏ –¥–ª—è *{ticker}*...\n"
            f"üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            entry_price = None
            stop_loss_price = None
            
            if len(context.args) >= 2:
                try:
                    entry_price = float(context.args[1])
                except ValueError:
                    await loading_msg.edit_text(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: {context.args[1]}\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/risk SBER 100`",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
            
            if len(context.args) >= 3:
                try:
                    stop_loss_price = float(context.args[2])
                except ValueError:
                    await loading_msg.edit_text(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {context.args[2]}\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/risk SBER 100 93`",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return

            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é
            if entry_price is None:
                instrument = self.tinkoff_client.search_instrument(ticker)
                if not instrument:
                    await loading_msg.edit_text(
                        f"‚ùå –ê–∫—Ü–∏—è —Å —Ç–∏–∫–µ—Ä–æ–º *{ticker}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: SBER, GAZP, YNDX, LKOH, NVTK, ROSN",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                price_data = self.tinkoff_client.get_last_price(instrument.figi)
                if not price_data:
                    await loading_msg.edit_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                entry_price = price_data.price.units + price_data.price.nano / 1_000_000_000

            # –°–æ–∑–¥–∞–µ–º risk manager
            risk_manager = RiskManager()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if stop_loss_price is None:
                sl_tp = risk_manager.calculate_stop_loss_take_profit(
                    ticker=ticker,
                    entry_price=entry_price,
                    signal_direction="BUY"
                )
                stop_loss_price = sl_tp["stop_loss_price"]
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ API)
            account_balance = 100000.0  # 100k —Ä—É–±–ª–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            position_analysis = risk_manager.calculate_position_size(
                ticker=ticker,
                entry_price=entry_price,
                stop_loss_price=stop_loss_price,
                account_balance=account_balance,
                confidence_score=0.6  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            sl_tp_analysis = risk_manager.calculate_stop_loss_take_profit(
                ticker=ticker,
                entry_price=entry_price,
                signal_direction="BUY"
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not position_analysis.get("approved", False):
                result_text = f"‚ùå *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í {ticker}*\n\n"
                result_text += f"üö´ *–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n"
                result_text += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {position_analysis.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                result_text += f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                result_text += f"‚Ä¢ –°–Ω–∏–∑—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
                result_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å\n"
                result_text += f"‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π"
            else:
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
                risk_emoji = {
                    "LOW": "üü¢",
                    "MEDIUM": "üü°", 
                    "HIGH": "üü†",
                    "EXTREME": "üî¥"
                }
                
                emoji = risk_emoji.get(position_analysis["risk_level"], "‚ö™")
                
                result_text = f"‚öñÔ∏è *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í {ticker}*\n\n"
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                result_text += f"üí∞ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏:*\n"
                result_text += f"üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f} ‚ÇΩ\n"
                result_text += f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price:.2f} ‚ÇΩ\n"
                result_text += f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {sl_tp_analysis['take_profit_price']:.2f} ‚ÇΩ\n\n"
                
                # –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
                result_text += f"üìä *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
                result_text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π: {position_analysis['shares_count']}\n"
                result_text += f"üíµ –°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏: {position_analysis['position_amount']:,.0f} ‚ÇΩ\n"
                result_text += f"üìà –î–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {position_analysis['position_percent']:.1f}%\n\n"
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
                result_text += f"‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:*\n"
                result_text += f"{emoji} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {position_analysis['risk_level']}\n"
                result_text += f"üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {position_analysis['risk_amount']:,.0f} ‚ÇΩ\n"
                result_text += f"üìâ –†–∏—Å–∫ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞: {position_analysis['risk_percent']:.2f}%\n"
                result_text += f"‚öñÔ∏è –†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:{sl_tp_analysis['risk_reward_ratio']:.1f}\n\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                result_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n"
                result_text += f"{position_analysis['recommendation']}\n\n"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                result_text += f"üìã *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
                result_text += f"‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø: {sl_tp_analysis['trailing_stop_distance']:.2f} ‚ÇΩ\n"
                result_text += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è\n"
                result_text += f"‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è\n\n"

            # –ü–æ–¥—Å–∫–∞–∑–∫–∏
            result_text += f"*üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            result_text += f"‚Ä¢ `/price {ticker}` - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n"
            result_text += f"‚Ä¢ `/analysis {ticker}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
            result_text += f"‚Ä¢ `/news {ticker}` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
            
            result_text += f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ 100,000 ‚ÇΩ. "
            result_text += f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç."

            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ {ticker} –∑–∞–≤–µ—Ä—à–µ–Ω: —Ä–∏—Å–∫ {position_analysis.get('risk_percent', 0):.2f}%")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ {ticker}*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞\n"
            error_msg += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/risk SBER 100 93` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n"
            error_msg += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Risk command error for {ticker}: {e}")

    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio."""
        loading_msg = await update.message.reply_text(
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ä—Ç—Ñ–µ–ª—å...\n"
            "üîç –û—Ü–µ–Ω–∏–≤–∞—é —Ä–∏—Å–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –°–æ–∑–¥–∞–µ–º risk manager
            risk_manager = RiskManager()
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            sample_positions = [
                {
                    "ticker": "SBER",
                    "shares": 100,
                    "entry_price": 95.0,
                    "current_price": 99.95,
                    "risk_percent": 2.1,
                    "sector": "–§–∏–Ω–∞–Ω—Å—ã"
                },
                {
                    "ticker": "GAZP", 
                    "shares": 50,
                    "entry_price": 180.0,
                    "current_price": 175.0,
                    "risk_percent": 1.8,
                    "sector": "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"
                }
            ]
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_analysis = risk_manager.assess_portfolio_risk(sample_positions)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"üìä *–ê–ù–ê–õ–ò–ó –ü–û–†–¢–§–ï–õ–Ø*\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result_text += f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            result_text += f"üî¢ –ü–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {portfolio_analysis['positions_count']}\n"
            result_text += f"‚öñÔ∏è –û–±—â–∏–π —Ä–∏—Å–∫: {portfolio_analysis['total_risk_percent']:.1f}%\n"
            result_text += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞: {portfolio_analysis['risk_utilization']:.1f}%\n"
            
            # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —Å —ç–º–æ–¥–∑–∏
            risk_emoji = {
                "LOW": "üü¢ –ù–∏–∑–∫–∏–π",
                "MEDIUM": "üü° –°—Ä–µ–¥–Ω–∏–π",
                "HIGH": "üü† –í—ã—Å–æ–∫–∏–π", 
                "EXTREME": "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
            }
            risk_text = risk_emoji.get(portfolio_analysis['risk_level'], "‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            result_text += f"üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_text}\n\n"
            
            # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if sample_positions:
                result_text += f"üíº *–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:*\n"
                for pos in sample_positions:
                    pnl = ((pos['current_price'] - pos['entry_price']) / pos['entry_price']) * 100
                    pnl_emoji = "üìà" if pnl >= 0 else "üìâ"
                    result_text += f"‚Ä¢ *{pos['ticker']}*: {pos['shares']} —à—Ç.\n"
                    result_text += f"  {pnl_emoji} P&L: {pnl:+.1f}% | –†–∏—Å–∫: {pos['risk_percent']:.1f}%\n"
                result_text += "\n"
            
            # –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if 'sector_exposure' in portfolio_analysis:
                result_text += f"üè≠ *–°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:*\n"
                for sector, exposure in portfolio_analysis['sector_exposure'].items():
                    result_text += f"‚Ä¢ {sector}: {exposure:.1f}%\n"
                result_text += "\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            result_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            for recommendation in portfolio_analysis['recommendations']:
                result_text += f"‚Ä¢ {recommendation}\n"
            result_text += "\n"
            
            # –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            result_text += f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:*\n"
            result_text += f"‚Ä¢ –ú–∞–∫—Å. —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio_analysis['max_allowed_risk']:.1f}%\n"
            result_text += f"‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è: 5.0% –¥–µ–ø–æ–∑–∏—Ç–∞\n"
            result_text += f"‚Ä¢ –ú–∞–∫—Å. –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: 3.0%\n"
            result_text += f"‚Ä¢ –ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: 5\n\n"
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏
            result_text += f"*üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º:*\n"
            result_text += f"‚Ä¢ `/risk TICKER` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏\n"
            result_text += f"‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞\n\n"
            
            result_text += f"‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. "
            result_text += f"–í –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏."

            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω: —Ä–∏—Å–∫ {portfolio_analysis['total_risk_percent']:.1f}%")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Portfolio command error: {e}")

    async def automation_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /automation."""
        loading_msg = await update.message.reply_text(
            "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...\n"
            "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            trading_engine = TradingEngine(mode=TradingMode.PAPER)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            signal = await trading_engine.generate_trading_signal("SBER")
            
            result_text = f"ü§ñ *–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–õ–ò*\n\n"
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            result_text += f"‚öôÔ∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n"
            result_text += f"üü¢ –†–µ–∂–∏–º: {trading_engine.mode.value} (–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)\n"
            result_text += f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            result_text += f"üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            result_text += f"‚öñÔ∏è Risk Management: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            result_text += f"üéõÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:*\n"
            result_text += f"‚Ä¢ –ú–∏–Ω. —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {trading_engine.min_signal_strength.value}\n"
            result_text += f"‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trading_engine.min_confidence:.1f}\n"
            result_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {trading_engine.scan_interval//60} –º–∏–Ω\n"
            result_text += f"‚Ä¢ –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {', '.join(trading_engine.watchlist)}\n\n"
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            if signal:
                emoji = "üü¢" if signal.direction == "BUY" else "üî¥" if signal.direction == "SELL" else "üü°"
                result_text += f"üéØ *–î–µ–º–æ-—Å–∏–≥–Ω–∞–ª {signal.ticker}:*\n"
                result_text += f"{emoji} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.direction}\n"
                result_text += f"üí™ –°–∏–ª–∞: {signal.strength.value}\n"
                result_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.0%}\n"
                result_text += f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal.reasoning}\n"
                result_text += f"üí∞ –í—Ö–æ–¥: {signal.entry_price:.2f} ‚ÇΩ\n"
                result_text += f"üõë –°—Ç–æ–ø: {signal.stop_loss:.2f} ‚ÇΩ\n"
                result_text += f"üéØ –¶–µ–ª—å: {signal.take_profit:.2f} ‚ÇΩ\n\n"
            else:
                result_text += f"üìä *–¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã:*\n"
                result_text += f"‚ùå –ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n"
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            result_text += f"üöÄ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*\n"
            result_text += f"üìù **MANUAL** - –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            result_text += f"üîÑ **SEMI_AUTO** - –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
            result_text += f"üìä **PAPER** - –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (—Ç–µ–∫—É—â–∏–π)\n"
            result_text += f"ü§ñ **AUTO** - –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (—Å–∫–æ—Ä–æ)\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result_text += f"üìà *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:*\n"
            result_text += f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: 2-4 —á–∞—Å–∞/–¥–µ–Ω—å\n"
            result_text += f"‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π\n"
            result_text += f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: –†–µ–∞–∫—Ü–∏—è –∑–∞ —Å–µ–∫—É–Ω–¥—ã\n"
            result_text += f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å: 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            
            # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            result_text += f"*üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
            result_text += f"‚Ä¢ `/scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞\n"
            result_text += f"‚Ä¢ `/morning_brief` - —É—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑\n"
            result_text += f"‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n\n"
            
            result_text += f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. "
            result_text += f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."

            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info("–ö–æ–º–∞–Ω–¥–∞ /automation –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Automation command error: {e}")

    async def scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan."""
        loading_msg = await update.message.reply_text(
            "üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...\n"
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–∏–∫–µ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            trading_engine = TradingEngine(mode=TradingMode.PAPER)
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
            quick_watchlist = trading_engine.watchlist[:3]
            signals = []
            
            for ticker in quick_watchlist:
                try:
                    signal = await trading_engine.generate_trading_signal(ticker)
                    if signal:
                        signals.append(signal)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {ticker}: {e}")
                    continue
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_text = f"üîç *–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–´–ù–ö–ê*\n\n"
            result_text += f"‚è∞ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n"
            result_text += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(quick_watchlist)}\n"
            result_text += f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}\n\n"
            
            if signals:
                result_text += f"üìà *–ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:*\n\n"
                
                for i, signal in enumerate(signals, 1):
                    emoji = "üü¢" if signal.direction == "BUY" else "üî¥" if signal.direction == "SELL" else "üü°"
                    
                    result_text += f"*{i}. {signal.ticker}*\n"
                    result_text += f"{emoji} {signal.direction} ‚Ä¢ {signal.strength.value}\n"
                    result_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.0%}\n"
                    result_text += f"üí∞ –¶–µ–Ω–∞: {signal.entry_price:.2f} ‚ÇΩ\n"
                    result_text += f"üìù {signal.reasoning[:50]}...\n\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                result_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                buy_signals = [s for s in signals if s.direction == "BUY"]
                sell_signals = [s for s in signals if s.direction == "SELL"]
                
                if buy_signals:
                    best_buy = max(buy_signals, key=lambda x: x.confidence)
                    result_text += f"‚Ä¢ –õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: {best_buy.ticker}\n"
                
                if sell_signals:
                    best_sell = max(sell_signals, key=lambda x: x.confidence)
                    result_text += f"‚Ä¢ –õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {best_sell.ticker}\n"
                
            else:
                result_text += f"üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:*\n"
                result_text += f"‚ùå –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n\n"
                result_text += f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(quick_watchlist)}\n"
                result_text += f"‚è≥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30-60 –º–∏–Ω—É—Ç\n\n"
                
                result_text += f"üí° *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                result_text += f"‚Ä¢ –†—ã–Ω–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏\n"
                result_text += f"‚Ä¢ –°–ª–∞–±—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                result_text += f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω\n"
            
            result_text += f"\n*üîÑ –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
            result_text += f"‚Ä¢ `/risk TICKER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤\n"
            result_text += f"‚Ä¢ `/automation` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
            result_text += f"‚Ä¢ `/portfolio` - —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n\n"
            
            result_text += f"‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. "
            result_text += f"–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π."

            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Scan command error: {e}")

    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analysis TICKER."""
        if not context.args:
            await update.message.reply_text(
                "üìä *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/analysis TICKER`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/analysis SBER` - –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/analysis GAZP` - –∞–Ω–∞–ª–∏–∑ –ì–∞–∑–ø—Ä–æ–º–∞\n"
                "‚Ä¢ `/analysis YNDX` - –∞–Ω–∞–ª–∏–∑ –Ø–Ω–¥–µ–∫—Å–∞\n\n"
                "üìà –í–∫–ª—é—á–∞–µ—Ç: RSI, MACD, —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ, –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä\n"
                "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3-8 —Å–µ–∫—É–Ω–¥",
                parse_mode="Markdown",
            )
            return

        ticker = context.args[0].upper()

        loading_msg = await update.message.reply_text(
            f"üìä –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ *{ticker}*...\n"
            f"üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é RSI, MACD, —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ...",
            parse_mode="Markdown",
        )

        try:
            from technical_analysis import get_ticker_analysis_for_telegram

            result_text = await get_ticker_analysis_for_telegram(ticker)

            await loading_msg.edit_text(result_text, parse_mode="Markdown")

            logger.info(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {ticker} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {ticker}*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ä (SBER, GAZP, YNDX)\n"
            error_msg += "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
            error_msg += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º"

            await loading_msg.edit_text(error_msg, parse_mode="Markdown")
            logger.error(f"Analysis command error for {ticker}: {e}")

    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /signal TICKER."""
        if not context.args:
            await update.message.reply_text(
                "üéØ *–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/signal TICKER`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/signal SBER` - —Å–∏–≥–Ω–∞–ª –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/signal GAZP` - —Å–∏–≥–Ω–∞–ª –¥–ª—è –ì–∞–∑–ø—Ä–æ–º–∞\n"
                "‚Ä¢ `/signal YNDX` - —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ø–Ω–¥–µ–∫—Å–∞\n\n"
                "üß† –û–±—ä–µ–¥–∏–Ω—è–µ—Ç: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (60%) + –Ω–æ–≤–æ—Å—Ç–∏ (40%)\n"
                "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-12 —Å–µ–∫—É–Ω–¥",
                parse_mode="Markdown",
            )
            return

        ticker = context.args[0].upper()

        loading_msg = await update.message.reply_text(
            f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è *{ticker}*...\n"
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–∏–Ω—É...\n"
            "üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω...\n"
            "üß† –ö–æ–º–±–∏–Ω–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            parse_mode="Markdown",
        )

        try:
            result_text = await get_trading_signal_for_telegram(ticker)

            await loading_msg.edit_text(result_text, parse_mode="Markdown")

            logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª {ticker} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {ticker}*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ä (SBER, GAZP, YNDX)\n"
            error_msg += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ `/analysis {ticker}` –∏ `/news {ticker}`\n"
            error_msg += "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"

            await loading_msg.edit_text(error_msg, parse_mode="Markdown")
            logger.error(f"Signal command error for {ticker}: {e}")

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = update.message.text
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
            response_message = """
‚ùì **–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É**
üìã **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ `/help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/accounts` - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ `/`
üöÄ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start` –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º.
            """
            await update.message.reply_text(response_message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/help`")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥")
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("price", self.price_command))
        self.application.add_handler(CommandHandler("accounts", self.accounts_command))
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–∏—Å–∫–∏
        self.application.add_handler(CommandHandler("news", self.news_command))
        self.application.add_handler(CommandHandler("risk", self.risk_command))
        self.application.add_handler(CommandHandler("portfolio", self.portfolio_command))
        self.application.add_handler(CommandHandler("analysis", self.analysis_command))
        self.application.add_handler(CommandHandler("signal", self.signal_command))
        # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        self.application.add_handler(CommandHandler("automation", self.automation_command))
        self.application.add_handler(CommandHandler("scan", self.scan_command))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.unknown_command)
        )
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            if not self.token:
                logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ " "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω " "–≤ .env —Ñ–∞–π–ª–µ")
                return
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            logger.info("ü§ñ Trading Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            logger.info("üîó –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ Tinkoff Invest")
            print("ü§ñ Trading Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            print("üõ°Ô∏è –†–µ–∂–∏–º: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES, drop_pending_updates=True
            )
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Trading Telegram Bot")
    bot = TradingTelegramBot()
    bot.run()


if __name__ == "__main__":
    main()
