from datetime import datetime

"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
–ü–æ–ª–Ω–∞—è –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import logging
from typing import List

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config import TELEGRAM_TOKEN
from risk_manager import RiskManager
from signal_generator import get_trading_signal_for_telegram
from tinkoff_client import TinkoffClient
from portfolio_manager import PortfolioManager
from trading_engine import TradingEngine, TradingMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = TELEGRAM_TOKEN
        self.tinkoff_client = TinkoffClient()
        self.portfolio_manager = PortfolioManager()
        self.application = None
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trading Telegram Bot")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            user_name = update.effective_user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
            welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot MVP, {user_name}!**
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ SBER
‚Ä¢ `/accounts` - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚ö†Ô∏è –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ **–ø–µ—Å–æ—á–Ω–∏—Ü—ã** –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
üí∞ –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è
üß™ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ
üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã** `/status` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!
            """
            await update.message.reply_text(welcome_message, parse_mode="Markdown")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        try:
            help_message = """
üìã **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã Trading Bot MVP:**
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
üí∞ **–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ `/price TICKER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`)
‚Ä¢ `/accounts` - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚Ä¢ `/news TICKER` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Ä¢ `/analysis TICKER` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏
‚Ä¢ `/signal TICKER` - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
‚öñÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:**
‚Ä¢ `/risk TICKER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏

üíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º:**
‚Ä¢ `/portfolio` - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
‚Ä¢ `/analytics` - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (Sharpe, VaR, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏)
‚Ä¢ `/buy TICKER QUANTITY` - –ø–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
‚Ä¢ `/automation` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ `/scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
üìä **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/price GAZP` - —Ü–µ–Ω–∞ –ì–∞–∑–ø—Ä–æ–º–∞
‚Ä¢ `/price YNDX` - —Ü–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å–∞
‚Ä¢ `/news SBER` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ
‚Ä¢ `/analysis SBER` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/risk SBER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/portfolio` - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
üöÄ **–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:**
‚Ä¢ üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
‚Ä¢ üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD)
‚Ä¢ üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.
‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Å–æ—á–Ω–∏—Ü–µ!
            """
            await update.message.reply_text(help_message, parse_mode="Markdown")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API
            tinkoff_status = "‚ùå –û—à–∏–±–∫–∞"
            accounts_count = 0
            try:
                accounts = self.tinkoff_client.get_accounts()
                if accounts:
                    tinkoff_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                    accounts_count = len(accounts)
                    logger.info(f"Tinkoff API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}")
                else:
                    logger.warning("Tinkoff API: —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tinkoff API: {e}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            status_message = f"""
üîç **–°–æ—Å—Ç–æ—è–Ω–∏–µ Trading Bot MVP**
üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
{tinkoff_status} Tinkoff Invest API
üìä –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
üõ°Ô∏è –¢–∏–ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üîÑ –°—Ç–∞—Ç—É—Å: {'–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if accounts_count > 0 else '–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
üìà **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚è≥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ–π—á–∞—Å
            """
            if accounts_count == 0:
                status_message += (
                    "\n‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** " "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )
            await update.message.reply_text(status_message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /price TICKER - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`",
                    parse_mode="Markdown",
                )
                return
            ticker = context.args[0].upper()
            await update.message.reply_text("üîç –ò—â—É —Ü–µ–Ω—É –¥–ª—è {ticker}...")
            logger.info("–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {ticker}")
            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument = self.tinkoff_client.search_instrument(ticker)
            if not instrument:
                await update.message.reply_text("‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä.")
                logger.warning("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price_data = self.tinkoff_client.get_last_price(instrument.figi)
            if not price_data:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}")
                return
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_rub = price_data.price.units + price_data.price.nano / 1_000_000_000
            price_message = f"""
üí∞ **{instrument.name}**
üìä **–¶–µ–Ω–∞:** {price_rub:.2f} ‚ÇΩ
üéØ **–¢–∏–∫–µ—Ä:** {ticker}
üîó **FIGI:** `{instrument.figi}`
‚è∞ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: —Å–µ–π—á–∞—Å
"""
            await update.message.reply_text(price_message, parse_mode="Markdown")
            logger.info("–¶–µ–Ω–∞ {ticker} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {price_rub:.2f} ‚ÇΩ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ price: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {ticker_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _get_sentiment_analysis(self, ticker: str, news_results: List) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ sentiment –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if len(news_results) > 0:
                from openai_analyzer import OpenAIAnalyzer

                analyzer = OpenAIAnalyzer()
                result = await analyzer.analyze_sentiment(ticker, news_results[:3])
                if result:
                    emoji_map = {
                        "STRONG_BUY": "üíö",
                        "BUY": "üü¢",
                        "HOLD": "üü°",
                        "SELL": "üü†",
                        "STRONG_SELL": "üî¥",
                    }
                    emoji = emoji_map.get(result.get("sentiment_label", "HOLD"), "‚ö™")
                    score = result.get("sentiment_score", 0.0)
                    summary = result.get("summary", "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return f"""
ü§ñ **–ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø AI:**
{emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {result.get("sentiment_label", "HOLD")}
üìä **–û—Ü–µ–Ω–∫–∞:** {score:.2f} (–æ—Ç -1.0 –¥–æ +1.0)
üìù **–ê–Ω–∞–ª–∏–∑:** {summary}
"""
        except Exception as e:
            logger.warning(f"OpenAI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {ticker}: {e}")
        return ""

    async def _format_news_result(self, ticker: str, news_results: List) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not news_results:
            return """üì∞ <b>–ù–û–í–û–°–¢–ò –ü–û {ticker}</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {ticker}
‚ùå –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –¢–∏–∫–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–∫–µ—Ä—ã: GAZP, YNDX, LKOH
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/price {ticker}</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
‚ö†Ô∏è <b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b> –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è."""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        sources = list(
            set(news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for news in news_results if news.get("source"))
        )
        sources_text = ", ".join(sources[:3])
        if len(sources) > 3:
            sources_text += " –∏ –µ—â—ë {len(sources) - 3}"
        # –î–æ–±–∞–≤–ª—è–µ–º sentiment –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI
        sentiment_block = await self._get_sentiment_analysis(ticker, news_results)
        result_text = f"""üì∞ <b>–ù–û–í–û–°–¢–ò –ü–û {ticker}</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {ticker}
üîç <b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(news_results)}
‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> {sources_text}{sentiment_block}
üìã <b>–¢–û–ü-{min(3, len(news_results))} –ù–û–í–û–°–¢–ï–ô:</b>
"""
        for i, news in enumerate(news_results[:3], 1):
            title = news.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            summary = news.get("content", news.get("summary", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
            source = news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
            if len(title) > 80:
                title = title[:77] + "..."
            if len(summary) > 150:
                summary = summary[:147] + "..."
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            title_escaped = title.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            summary_escaped = (
                summary.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            )
            source_escaped = source.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            result_text += f"""<b>{i}. {title_escaped}</b>
üìù {summary_escaped}
üåê {source_escaped}
"""
        if len(news_results) > 3:
            result_text += f"üìã –ò –µ—â—ë {len(news_results) - 3} –Ω–æ–≤–æ—Å—Ç–µ–π...\n\n"
        result_text += """üïê <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {ticker} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- <code>/status</code> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚ö†Ô∏è <b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b> –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π."""
        return result_text

    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /accounts - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤"""
        try:
            await update.message.reply_text(
                "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö...", parse_mode="Markdown"
            )
            logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤")
            accounts = self.tinkoff_client.get_accounts()
            if not accounts:
                await update.message.reply_text(
                    "‚ùå **–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Tinkoff API\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API\n"
                    "‚Ä¢ –°—á–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/status` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    parse_mode="Markdown",
                )
                logger.warning("–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            accounts_message = "üíº **–í–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞** ({len(accounts)} —à—Ç.)\n\n"
            for i, account in enumerate(accounts, 1):
                account_id = account.id
                account_name = account.name if account.name else "–°—á–µ—Ç {i}"
                account_type = account.type.name if hasattr(account, "type") else "UNSPECIFIED"
                accounts_message += f"""
**üè¶ –°—á–µ—Ç {i}:**
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {account_name}
üÜî ID: `{account_id}`
üìã –¢–∏–ø: {account_type}
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞
---
                """
            accounts_message += """
‚úÖ **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:** {len(accounts)}
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
üí° **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/price SBER`
‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!
            """
            await update.message.reply_text(accounts_message, parse_mode="Markdown")
            logger.info("–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(accounts)} —Å—á–µ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ accounts: {e}")
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤**\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ `/status`",
                parse_mode="Markdown",
            )

    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /news TICKER - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üì∞ <b>–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/news TICKER</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ <code>/news SBER</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ\n"
                    "‚Ä¢ <code>/news GAZP</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –ì–∞–∑–ø—Ä–æ–º–µ\n"
                    "‚Ä¢ <code>/news YNDX</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –Ø–Ω–¥–µ–∫—Å–µ\n\n"
                    "ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                    "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3-7 —Å–µ–∫—É–Ω–¥",
                    parse_mode="HTML",
                )
                return
            ticker = context.args[0].upper()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_msg = await update.message.reply_text(
                "üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –æ <b>{ticker}</b>...\n" "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ Perplexity AI...",
                parse_mode="HTML",
            )
            try:
                from perplexity_client import PerplexityClient

                perplexity = PerplexityClient()
                news_results = perplexity.search_ticker_news(ticker, hours=24)
                result_text = await self._format_news_result(ticker, news_results)
            except ImportError:
                result_text = """‚ùå <b>PERPLEXITY CLIENT –ù–ï –ù–ê–ô–î–ï–ù</b>
üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª <code>perplexity_client.py</code>
üí° –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- <code>/status</code> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º"""
            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ Perplexity API –¥–ª—è {ticker}: {api_error}")
                result_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô {ticker}</b>
üîç –ü—Ä–∏—á–∏–Ω–∞: {str(api_error)}
üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/status</code> –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä: GAZP, YNDX
üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞"""
            await loading_msg.edit_text(result_text, parse_mode="HTML")
            logger.info("–ö–æ–º–∞–Ω–¥–∞ news –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {ticker}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ news: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π {ticker_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
            )

    async def _parse_risk_params(self, args, loading_msg, ticker):
        """Parse entry price and stop loss from command arguments."""
        entry_price = None
        stop_loss_price = None

        if len(args) >= 2:
            try:
                entry_price = float(args[1])
            except ValueError:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: {args[1]}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/risk SBER 100`",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return None, None

        if len(args) >= 3:
            try:
                stop_loss_price = float(args[2])
            except ValueError:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {args[2]}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/risk SBER 100 93`",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return None, None

        return entry_price, stop_loss_price

    async def _get_current_price(self, ticker, loading_msg):
        """Get current price for ticker if not provided."""
        instrument = self.tinkoff_client.search_instrument(ticker)
        if not instrument:
            await loading_msg.edit_text(
                "‚ùå –ê–∫—Ü–∏—è —Å —Ç–∏–∫–µ—Ä–æ–º *{ticker}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: SBER, GAZP, YNDX, LKOH, NVTK, ROSN",
                parse_mode=ParseMode.MARKDOWN,
            )
            return None

        price_data = self.tinkoff_client.get_last_price(instrument.figi)
        if not price_data:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}", parse_mode=ParseMode.MARKDOWN
            )
            return None

        return price_data.price.units + price_data.price.nano / 1_000_000_000

    def _format_risk_result(
        self, ticker, position_analysis, sl_tp_analysis, entry_price, stop_loss_price
    ):
        """Format risk analysis result text."""
        if not position_analysis.get("approved", False):
            result_text = f"‚ùå *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í {ticker}*\n\n"
            result_text += "üö´ *–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n"
            result_text += (
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {position_analysis.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            )
            result_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            result_text += "‚Ä¢ –°–Ω–∏–∑—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
            result_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å\n"
            result_text += "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π"
            return result_text

        risk_emoji = {"LOW": "üü¢", "MEDIUM": "üü°", "HIGH": "üü†", "EXTREME": "üî¥"}
        emoji = risk_emoji.get(position_analysis["risk_level"], "‚ö™")

        result_text = f"‚öñÔ∏è *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í {ticker}*\n\n"
        result_text += "üí∞ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏:*\n"
        result_text += f"üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f} ‚ÇΩ\n"
        result_text += f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price:.2f} ‚ÇΩ\n"
        result_text += f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {sl_tp_analysis['take_profit_price']:.2f} ‚ÇΩ\n\n"

        result_text += "üìä *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
        result_text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π: {position_analysis['shares_count']}\n"
        result_text += f"üíµ –°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏: {position_analysis['position_amount']:,.0f} ‚ÇΩ\n"
        result_text += f"üìà –î–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {position_analysis['position_percent']:.1f}%\n\n"

        result_text += "‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:*\n"
        result_text += f"{emoji} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {position_analysis['risk_level']}\n"
        result_text += f"üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {position_analysis['risk_amount']:,.0f} ‚ÇΩ\n"
        result_text += f"üìâ –†–∏—Å–∫ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞: {position_analysis['risk_percent']:.2f}%\n"
        result_text += f"‚öñÔ∏è –†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:{sl_tp_analysis['risk_reward_ratio']:.1f}\n\n"

        result_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n"
        result_text += f"{position_analysis['recommendation']}\n\n"

        result_text += "üìã *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        result_text += f"‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø: {sl_tp_analysis['trailing_stop_distance']:.2f} ‚ÇΩ\n"
        result_text += "‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è\n"
        result_text += "‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è\n\n"

        result_text += "*üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        result_text += f"‚Ä¢ `/price {ticker}` - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n"
        result_text += f"‚Ä¢ `/analysis {ticker}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        result_text += f"‚Ä¢ `/news {ticker}` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"

        result_text += "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ 100,000 ‚ÇΩ. "
        result_text += "–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç."

        return result_text

    async def risk_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /risk TICKER."""
        if not context.args:
            await update.message.reply_text(
                "‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/risk TICKER [–¶–ï–ù–ê_–í–•–û–î–ê] [–°–¢–û–ü_–õ–û–°–°]`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/risk SBER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ\n"
                "‚Ä¢ `/risk SBER 100 93` - –∞–Ω–∞–ª–∏–∑ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
                "üìä –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞\n"
                "‚Ä¢ –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞\n"
                "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        ticker = context.args[0].upper()
        loading_msg = await update.message.reply_text(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∏—Å–∫–∏ –¥–ª—è *{ticker}*...\n"
            "üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...",
            parse_mode=ParseMode.MARKDOWN,
        )

        try:
            entry_price, stop_loss_price = await self._parse_risk_params(
                context.args, loading_msg, ticker
            )
            if entry_price is None and len(context.args) >= 2:
                return  # Error already handled

            if entry_price is None:
                entry_price = await self._get_current_price(ticker, loading_msg)
                if entry_price is None:
                    return  # Error already handled

            risk_manager = RiskManager()

            if stop_loss_price is None:
                sl_tp = risk_manager.calculate_stop_loss_take_profit(
                    ticker=ticker, entry_price=entry_price, signal_direction="BUY"
                )
                stop_loss_price = sl_tp["stop_loss_price"]

            account_balance = 100000.0
            position_analysis = risk_manager.calculate_position_size(
                ticker=ticker,
                entry_price=entry_price,
                stop_loss_price=stop_loss_price,
                account_balance=account_balance,
                confidence_score=0.6,
            )

            sl_tp_analysis = risk_manager.calculate_stop_loss_take_profit(
                ticker=ticker, entry_price=entry_price, signal_direction="BUY"
            )

            result_text = self._format_risk_result(
                ticker, position_analysis, sl_tp_analysis, entry_price, stop_loss_price
            )

            await loading_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)
            logger.info(
                "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ {ticker} –∑–∞–≤–µ—Ä—à–µ–Ω: —Ä–∏—Å–∫ {position_analysis.get('risk_percent', 0):.2f}%"
            )

        except Exception as e:
            error_msg = "‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ {ticker}*\n\n"
            error_msg += "–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞\n"
            error_msg += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/risk SBER 100 93` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n"
            error_msg += "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"

            await loading_msg.edit_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            logger.error(f"Risk command error for {ticker}: {e}")

    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio."""
        loading_msg = await update.message.reply_text(
            "üíº –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...", parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
            await self.portfolio_manager.update_portfolio_prices()
            summary = self.portfolio_manager.get_portfolio_summary()

            if "error" in summary:
                await loading_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {summary['error']}",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            portfolio_text = self._format_portfolio_summary(summary)

            await loading_msg.edit_text(portfolio_text, parse_mode=ParseMode.MARKDOWN)

            logger.info("–°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Portfolio command error: {e}")

    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics."""
        loading_msg = await update.message.reply_text(
            "üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...\n"
            "üî¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏...\n"
            "üìà –í—ã—á–∏—Å–ª—è—é Sharpe ratio –∏ VaR...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Portfolio Analytics
            from portfolio_analytics import PortfolioAnalytics

            analytics = PortfolioAnalytics(self.portfolio_manager)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            days = 30
            if context.args and context.args[0].isdigit():
                days = min(90, max(7, int(context.args[0])))

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = await analytics.calculate_portfolio_metrics(days=days)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram
            result_text = analytics.format_metrics_for_telegram(metrics)

            await loading_msg.edit_text(
                result_text,
                parse_mode=None
            )

            logger.info(f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {metrics.positions_count} –ø–æ–∑–∏—Ü–∏–π, "
                       f"Sharpe {metrics.sharpe_ratio:.2f}")

        except Exception as e:
            error_msg = "‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ\n"
            error_msg += "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
            error_msg += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /portfolio –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π"

            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Analytics command error: {e}")

    async def buy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy TICKER QUANTITY."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "üí∞ *–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/buy TICKER QUANTITY`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/buy SBER 100` - –∫—É–ø–∏—Ç—å 100 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/buy GAZP 50` - –∫—É–ø–∏—Ç—å 50 –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞\n\n"
                "üí° –ü–æ–∫—É–ø–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        ticker = context.args[0].upper()
        try:
            quantity = int(context.args[1])
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º", parse_mode=ParseMode.MARKDOWN
            )
            return

        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        loading_msg = await update.message.reply_text(
            f"üí∞ –ü–æ–∫—É–ø–∞—é {quantity} –∞–∫—Ü–∏–π {ticker}...", parse_mode=ParseMode.MARKDOWN
        )

        try:
            result = await self.portfolio_manager.buy_stock(ticker, quantity)

            if result["success"]:
                buy_text = f"""
üí∞ *–ü–û–ö–£–ü–ö–ê–í–´–ü–û–õ–ù–ï–ù–ê*

üéØ *–ê–∫—Ü–∏—è:* {ticker}
üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {result['quantity']} —à—Ç
üíµ *–¶–µ–Ω–∞:* {result['price']:.2f} ‚ÇΩ
üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* {result['commission']:.2f} ‚ÇΩ
üí≥ *–û–±—â–∞—è —Å—É–º–º–∞:* {result['total_cost']:,.0f} ‚ÇΩ

üí∞ *–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:* {result['new_cash_balance']:,.0f} ‚ÇΩ

üéâ –ê–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å!

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                """
            else:
                buy_text = f"""
‚ùå *–û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò*

üéØ *–ê–∫—Ü–∏—è:* {ticker}
üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity} —à—Ç

‚ùå *–ü—Ä–∏—á–∏–Ω–∞:* {result['error']}

üí° *–°–æ–≤–µ—Ç—ã:*
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ä–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
                """

            await loading_msg.edit_text(buy_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ {ticker}: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Buy command error for {ticker}: {e}")

    async def sell_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell TICKER QUANTITY."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "üìà *–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/sell TICKER QUANTITY`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/sell SBER 25` - –ø—Ä–æ–¥–∞—Ç—å 25 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/sell GAZP 30` - –ø—Ä–æ–¥–∞—Ç—å 30 –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞\n\n"
                "üí° –ü—Ä–æ–¥–∞–∂–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ\n"
                "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π",
                parse_mode=ParseMode.MARKDOWN
            )

    def setup_handlers(self, app: Application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("status", self.status_command))
        app.add_handler(CommandHandler("price", self.price_command))
        app.add_handler(CommandHandler("accounts", self.accounts_command))
        app.add_handler(CommandHandler("news", self.news_command))
        app.add_handler(CommandHandler("risk", self.risk_command))
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è
        app.add_handler(CommandHandler("portfolio", self.portfolio_command))
        app.add_handler(CommandHandler("analytics", self.analytics_command))
        app.add_handler(CommandHandler("buy", self.buy_command))
        app.add_handler(CommandHandler("sell", self.sell_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.help_command))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Trading Bot...")
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers(self.application)
            self.application.run_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    bot = TradingTelegramBot()
    bot.run()