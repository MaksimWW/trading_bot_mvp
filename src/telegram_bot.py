"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
–ü–æ–ª–Ω–∞—è –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import logging

from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config import TELEGRAM_TOKEN
from tinkoff_client import TinkoffClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = TELEGRAM_TOKEN
        self.tinkoff_client = TinkoffClient()
        self.application = None
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trading Telegram Bot")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            user_name = update.effective_user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
            welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot MVP, {user_name}!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ SBER
‚Ä¢ `/accounts` - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚ö†Ô∏è –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ **–ø–µ—Å–æ—á–Ω–∏—Ü—ã** –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
üí∞ –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è
üß™ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ

üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã** `/status` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!
            """
            await update.message.reply_text(welcome_message, parse_mode="Markdown")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        try:
            help_message = """
üìã **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã Trading Bot MVP:**

üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

üí∞ **–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ `/price TICKER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`)
‚Ä¢ `/accounts` - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚Ä¢ `/news TICKER` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üìä **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/price GAZP` - —Ü–µ–Ω–∞ –ì–∞–∑–ø—Ä–æ–º–∞
‚Ä¢ `/price YNDX` - —Ü–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å–∞
‚Ä¢ `/news SBER` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ

üöÄ **–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:**
‚Ä¢ üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
‚Ä¢ üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD)
‚Ä¢ üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.

‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Å–æ—á–Ω–∏—Ü–µ!
            """
            await update.message.reply_text(help_message, parse_mode="Markdown")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API
            tinkoff_status = "‚ùå –û—à–∏–±–∫–∞"
            accounts_count = 0

            try:
                accounts = self.tinkoff_client.get_accounts()
                if accounts:
                    tinkoff_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                    accounts_count = len(accounts)
                    logger.info(f"Tinkoff API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}")
                else:
                    logger.warning("Tinkoff API: —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tinkoff API: {e}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            status_message = f"""
üîç **–°–æ—Å—Ç–æ—è–Ω–∏–µ Trading Bot MVP**

üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
{tinkoff_status} Tinkoff Invest API
üìä –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
üõ°Ô∏è –¢–∏–ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üîÑ –°—Ç–∞—Ç—É—Å: {'–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if accounts_count > 0 else '–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}

üìà **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚è≥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ–π—á–∞—Å
            """

            if accounts_count == 0:
                status_message += (
                    "\n‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** " "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )

            await update.message.reply_text(status_message, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /price TICKER - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`",
                    parse_mode="Markdown",
                )
                return

            ticker = context.args[0].upper()
            await update.message.reply_text(f"üîç –ò—â—É —Ü–µ–Ω—É –¥–ª—è {ticker}...")
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {ticker}")

            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument = self.tinkoff_client.search_instrument(ticker)

            if not instrument:
                await update.message.reply_text(f"‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä.")
                logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price_data = self.tinkoff_client.get_last_price(instrument.figi)

            if not price_data:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_rub = price_data.price.units + price_data.price.nano / 1_000_000_000

            price_message = f"""
üí∞ **{instrument.name}**

üìä **–¶–µ–Ω–∞:** {price_rub:.2f} ‚ÇΩ
üéØ **–¢–∏–∫–µ—Ä:** {ticker}
üîó **FIGI:** `{instrument.figi}`

‚è∞ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: —Å–µ–π—á–∞—Å
üèõÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫: Tinkoff Invest API (–ø–µ—Å–æ—á–Ω–∏—Ü–∞)
            """

            await update.message.reply_text(price_message, parse_mode="Markdown")
            logger.info(f"–¶–µ–Ω–∞ {ticker} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {price_rub:.2f} ‚ÇΩ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ price: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {ticker_name}. " f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /accounts - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤"""
        try:
            await update.message.reply_text(
                "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö...", parse_mode="Markdown"
            )
            logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤")

            accounts = self.tinkoff_client.get_accounts()

            if not accounts:
                await update.message.reply_text(
                    "‚ùå **–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Tinkoff API\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API\n"
                    "‚Ä¢ –°—á–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/status` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    parse_mode="Markdown",
                )
                logger.warning("–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            accounts_message = f"üíº **–í–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞** ({len(accounts)} —à—Ç.)\n\n"

            for i, account in enumerate(accounts, 1):
                account_id = account.id
                account_name = account.name if account.name else f"–°—á–µ—Ç {i}"
                account_type = account.type.name if hasattr(account, "type") else "UNSPECIFIED"

                accounts_message += f"""
**üè¶ –°—á–µ—Ç {i}:**
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {account_name}
üÜî ID: `{account_id}`
üìã –¢–∏–ø: {account_type}
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞

---
                """

            accounts_message += f"""

‚úÖ **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:** {len(accounts)}
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
üí° **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/price SBER`

‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!
            """

            await update.message.reply_text(accounts_message, parse_mode="Markdown")
            logger.info(f"–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(accounts)} —Å—á–µ—Ç–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ accounts: {e}")
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤**\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ `/status`",
                parse_mode="Markdown",
            )

    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /news TICKER - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üì∞ **–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/news TICKER`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/news SBER` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ\n"
                    "‚Ä¢ `/news GAZP` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –ì–∞–∑–ø—Ä–æ–º–µ\n"
                    "‚Ä¢ `/news YNDX` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –Ø–Ω–¥–µ–∫—Å–µ\n\n"
                    "ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                    "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3-7 —Å–µ–∫—É–Ω–¥",
                    parse_mode="Markdown"
                )
                return

            ticker = context.args[0].upper()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_msg = await update.message.reply_text(
                f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –æ **{ticker}**...\n"
                f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ Perplexity AI...",
                parse_mode="Markdown"
            )
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
            import asyncio
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            
            # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            result_text = f"""üì∞ **–ù–û–í–û–°–¢–ò –ü–û {ticker}**

üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {ticker}
üîç **–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚è±Ô∏è **–ü–µ—Ä–∏–æ–¥:** –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

üöß **–°—Ç–∞—Ç—É—Å:** –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

üí° **–ß—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
- `/price {ticker}` - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
- `/accounts` - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º

üöÄ **–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:**
- –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Perplexity API
- –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI
- –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–µ–π

‚ö†Ô∏è **–î–∏—Å–∫–ª–µ–π–º–µ—Ä:** –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è."""
            
            await loading_msg.edit_text(result_text, parse_mode="Markdown")
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ news –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {ticker}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ news: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π {ticker_name}. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = update.message.text
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

            response_message = """
‚ùì **–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É**

üìã **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ `/help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/accounts` - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ `/`

üöÄ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/start` –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –±–æ—Ç–æ–º.
            """
            await update.message.reply_text(response_message, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/help`")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("price", self.price_command))
        self.application.add_handler(CommandHandler("accounts", self.accounts_command))
        self.application.add_handler(CommandHandler("news", self.news_command))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.unknown_command)
        )

        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            if not self.token:
                logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ " "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω " "–≤ .env —Ñ–∞–π–ª–µ")
                return

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.token).build()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()

            logger.info("ü§ñ Trading Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            logger.info("üîó –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ Tinkoff Invest")

            print("ü§ñ Trading Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
            print("üõ°Ô∏è –†–µ–∂–∏–º: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES, drop_pending_updates=True
            )

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Trading Telegram Bot")
    bot = TradingTelegramBot()
    bot.run()


if __name__ == "__main__":
    main()
