"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
–ü–æ–ª–Ω–∞—è –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import logging
from datetime import datetime
from typing import Dict, List

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from config import TELEGRAM_TOKEN
from portfolio_manager import PortfolioManager
from risk_manager import RiskManager
from tinkoff_client import TinkoffClient
from portfolio_coordinator import get_portfolio_coordinator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = TELEGRAM_TOKEN
        self.tinkoff_client = TinkoffClient()
        self.portfolio_manager = PortfolioManager()
        self.application = None

        # Portfolio Coordinator
        from portfolio_coordinator import get_portfolio_coordinator
        self.portfolio_coordinator = get_portfolio_coordinator()

        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trading Telegram Bot")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            user_name = update.effective_user.first_name or "–¢—Ä–µ–π–¥–µ—Ä"
            welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot MVP, {user_name}!**
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/help` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ SBER
‚Ä¢ `/accounts` - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚ö†Ô∏è –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ **–ø–µ—Å–æ—á–Ω–∏—Ü—ã** –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
üí∞ –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è
üß™ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ
üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã** `/status` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!
            """
            await update.message.reply_text(welcome_message, parse_mode="Markdown")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        try:
            help_message = """
üìã **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã Trading Bot MVP:**
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/status` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
üí∞ **–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ `/price TICKER` - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`)
‚Ä¢ `/accounts` - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚Ä¢ `/news TICKER` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Ä¢ `/analysis TICKER` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏
‚Ä¢ `/signal TICKER` - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
‚öñÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:**
‚Ä¢ `/risk TICKER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏

üíº **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º:**
‚Ä¢ `/portfolio` - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
‚Ä¢ `/analytics` - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (Sharpe, VaR, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏)
‚Ä¢ `/buy TICKER QUANTITY` - –ø–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π
üìä **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è:**
‚Ä¢ `/portfolio_strategies` - –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
‚Ä¢ `/strategy_weights` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ `/coordinate_portfolio` - –∑–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
‚Ä¢ `/portfolio_performance` - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è

ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:**
‚Ä¢ `/strategies` - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ `/start_strategy ID` - –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ `/stop_strategy ID` - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ `/scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
üìä **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/price SBER` - —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/price GAZP` - —Ü–µ–Ω–∞ –ì–∞–∑–ø—Ä–æ–º–∞
‚Ä¢ `/price YNDX` - —Ü–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å–∞
‚Ä¢ `/news SBER` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ
‚Ä¢ `/analysis SBER` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/risk SBER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ `/portfolio` - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
üöÄ **–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:**
‚Ä¢ üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
‚Ä¢ üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD)
‚Ä¢ üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.
‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –†–∞–±–æ—Ç–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Å–æ—á–Ω–∏—Ü–µ!
            """
            await update.message.reply_text(help_message, parse_mode="Markdown")
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API
            tinkoff_status = "‚ùå –û—à–∏–±–∫–∞"
            accounts_count = 0
            try:
                accounts = self.tinkoff_client.get_accounts()
                if accounts:
                    tinkoff_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω"
                    accounts_count = len(accounts)
                    logger.info(f"Tinkoff API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}")
                else:
                    logger.warning("Tinkoff API: —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tinkoff API: {e}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            status_message = f"""
üîç **–°–æ—Å—Ç–æ—è–Ω–∏–µ Trading Bot MVP**
üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
{tinkoff_status} Tinkoff Invest API
üìä –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {accounts_count}
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
üõ°Ô∏è –¢–∏–ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üîÑ –°—Ç–∞—Ç—É—Å: {'–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if accounts_count > 0 else '–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
üìà **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ü–∏–π
‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
‚è≥ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚è≥ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ–π—á–∞—Å
            """
            if accounts_count == 0:
                status_message += (
                    "\n‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** " "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tinkoff API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )
            await update.message.reply_text(status_message, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /price TICKER - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`",
                    parse_mode="Markdown",
                )
                return
            ticker = context.args[0].upper()
            await update.message.reply_text(f"üîç –ò—â—É —Ü–µ–Ω—É –¥–ª—è {ticker}...")
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {ticker}")
            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument = self.tinkoff_client.search_instrument(ticker)
            if not instrument:
                await update.message.reply_text(f"‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä.")
                logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price_data = self.tinkoff_client.get_last_price(instrument["figi"])
            if not price_data:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}")
                return
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price_rub = price_data.price.units + price_data.price.nano / 1_000_000_000
            price_message = f"""
üí∞ **{instrument["name"]}**
üìä **–¶–µ–Ω–∞:** {price_rub:.2f} ‚ÇΩ
üéØ **–¢–∏–∫–µ—Ä:** {ticker}
üîó **FIGI:** `{instrument["figi"]}`
‚è∞ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: —Å–µ–π—á–∞—Å
"""
            await update.message.reply_text(price_message, parse_mode="Markdown")
            logger.info(f"–¶–µ–Ω–∞ {ticker} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {price_rub:.2f} ‚ÇΩ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ price: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {ticker_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _get_sentiment_analysis(self, ticker: str, news_results: List) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ sentiment –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if len(news_results) > 0:
                from openai_analyzer import OpenAIAnalyzer

                analyzer = OpenAIAnalyzer()
                result = await analyzer.analyze_sentiment(ticker, news_results[:3])
                if result:
                    emoji_map = {
                        "STRONG_BUY": "üíö",
                        "BUY": "üü¢",
                        "HOLD": "üü°",
                        "SELL": "üü†",
                        "STRONG_SELL": "üî¥",
                    }
                    emoji = emoji_map.get(result.get("sentiment_label", "HOLD"), "‚ö™")
                    score = result.get("sentiment_score", 0.0)
                    summary = result.get("summary", "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return f"""
ü§ñ **–ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø AI:**
{emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {result.get("sentiment_label", "HOLD")}
üìä **–û—Ü–µ–Ω–∫–∞:** {score:.2f} (–æ—Ç -1.0 –¥–æ +1.0)
üìù **–ê–Ω–∞–ª–∏–∑:** {summary}
"""
        except Exception as e:
            logger.warning(f"OpenAI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {ticker}: {e}")
        return ""

    async def _format_news_result(self, ticker: str, news_results: List) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not news_results:
            return f"""üì∞ <b>–ù–û–í–û–°–¢–ò –ü–û {ticker}</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {ticker}
‚ùå –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –¢–∏–∫–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–∫–µ—Ä—ã: GAZP, YNDX, LKOH
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/price {ticker}</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
‚ö†Ô∏è <b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b> –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è."""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        sources = list(
            set(news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for news in news_results if news.get("source"))
        )
        sources_text = ", ".join(sources[:3])
        if len(sources) > 3:
            sources_text += f" –∏ –µ—â—ë {len(sources) - 3}"
        # –î–æ–±–∞–≤–ª—è–µ–º sentiment –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI
        sentiment_block = await self._get_sentiment_analysis(ticker, news_results)
        result_text = f"""üì∞ <b>–ù–û–í–û–°–¢–ò –ü–û {ticker}</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {ticker}
üîç <b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(news_results)}
‚è∞ <b>–ü–µ—Ä–∏–æ–¥:</b> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> {sources_text}{sentiment_block}
üìã <b>–¢–û–ü-{min(3, len(news_results))} –ù–û–í–û–°–¢–ï–ô:</b>
"""
        for i, news in enumerate(news_results[:3], 1):
            title = news.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            summary = news.get("content", news.get("summary", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
            source = news.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
            if len(title) > 80:
                title = title[:77] + "..."
            if len(summary) > 150:
                summary = summary[:147] + "..."
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            title_escaped = title.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            summary_escaped = (
                summary.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            )
            source_escaped = source.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            result_text += f"""<b>{i}. {title_escaped}</b>
üìù {summary_escaped}
üåê {source_escaped}
"""
        if len(news_results) > 3:
            result_text += f"üìã –ò –µ—â—ë {len(news_results) - 3} –Ω–æ–≤–æ—Å—Ç–µ–π...\n\n"
        result_text += f"""üïê <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {ticker} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- <code>/status</code> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚ö†Ô∏è <b>–î–∏—Å–∫–ª–µ–π–º–µ—Ä:</b> –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è. –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π."""
        return result_text

    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /accounts - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤"""
        try:
            await update.message.reply_text(
                "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö...", parse_mode="Markdown"
            )
            logger.info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤")
            accounts = self.tinkoff_client.get_accounts()
            if not accounts:
                await update.message.reply_text(
                    "‚ùå **–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Tinkoff API\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω API\n"
                    "‚Ä¢ –°—á–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/status` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    parse_mode="Markdown",
                )
                logger.warning("–¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            accounts_message = f"üíº **–í–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞** ({len(accounts)} —à—Ç.)\n\n"
            for i, account in enumerate(accounts, 1):
                account_id = account.id
                account_name = account.name if account.name else f"–°—á–µ—Ç {i}"
                account_type = account.type.name if hasattr(account, "type") else "UNSPECIFIED"
                accounts_message += f"""
**üè¶ –°—á–µ—Ç {i}:**
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {account_name}
üÜî ID: `{account_id}`
üìã –¢–∏–ø: {account_type}
üèõÔ∏è –†–µ–∂–∏–º: –ü–µ—Å–æ—á–Ω–∏—Ü–∞
---
                """
            accounts_message += f"""
‚úÖ **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:** {len(accounts)}
üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
üí° **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/price SBER`
‚ö†Ô∏è **–ü–æ–º–Ω–∏—Ç–µ:** –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—á–µ—Ç–∞, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!
            """
            await update.message.reply_text(accounts_message, parse_mode="Markdown")
            logger.info(f"–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(accounts)} —Å—á–µ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ accounts: {e}")
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤**\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ `/status`",
                parse_mode="Markdown",
            )

    async def news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /news TICKER - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üì∞ <b>–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/news TICKER</code>\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ <code>/news SBER</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –°–±–µ—Ä–±–∞–Ω–∫–µ\n"
                    "‚Ä¢ <code>/news GAZP</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –ì–∞–∑–ø—Ä–æ–º–µ\n"
                    "‚Ä¢ <code>/news YNDX</code> - –Ω–æ–≤–æ—Å—Ç–∏ –æ –Ø–Ω–¥–µ–∫—Å–µ\n\n"
                    "ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                    "‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 3-7 —Å–µ–∫—É–Ω–¥",
                    parse_mode="HTML",
                )
                return
            ticker = context.args[0].upper()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            loading_msg = await update.message.reply_text(
                f"üîç –ò—â—É –Ω–æ–≤–æ—Å—Ç–∏ –æ <b>{ticker}</b>...\n" "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ Perplexity AI...",
                parse_mode="HTML",
            )
            try:
                from perplexity_client import PerplexityClient

                perplexity = PerplexityClient()
                news_results = perplexity.search_ticker_news(ticker, hours=24)
                result_text = await self._format_news_result(ticker, news_results)
            except ImportError:
                result_text = f"""‚ùå <b>PERPLEXITY CLIENT –ù–ï –ù–ê–ô–î–ï–ù</b>
üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª <code>perplexity_client.py</code>
üí° –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞
- <code>/status</code> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º"""
            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ Perplexity API –¥–ª—è {ticker}: {api_error}")
                result_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô {ticker}</b>
üîç –ü—Ä–∏—á–∏–Ω–∞: {str(api_error)}
üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>/status</code> –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä: GAZP, YNDX
üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:
- <code>/price {ticker}</code> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
- <code>/accounts</code> - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞"""
            await loading_msg.edit_text(result_text, parse_mode="HTML")
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ news –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {ticker}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ news: {e}")
            ticker_name = context.args[0].upper() if context.args else "–∞–∫—Ü–∏–∏"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π {ticker_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
            )

    async def _parse_risk_params(self, args, loading_msg, ticker):
        """Parse entry price and stop loss from command arguments."""
        entry_price = None
        stop_loss_price = None

        if len(args) >= 2:
            try:
                entry_price = float(args[1])
            except ValueError:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: {args[1]}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/risk SBER 100`",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return None, None

        if len(args) >= 3:
            try:
                stop_loss_price = float(args[2])
            except ValueError:
                await loading_msg.edit_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {args[2]}\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/risk SBER 100 93`",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return None, None

        return entry_price, stop_loss_price

    async def _get_current_price(self, ticker, loading_msg):
        """Get current price for ticker if not provided."""
        instrument = self.tinkoff_client.search_instrument(ticker)
        if not instrument:
            await loading_msg.edit_text(
                f"‚ùå –ê–∫—Ü–∏—è —Å —Ç–∏–∫–µ—Ä–æ–º *{ticker}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: SBER, GAZP, YNDX, LKOH, NVTK, ROSN",
                parse_mode=ParseMode.MARKDOWN,
            )
            return None

        price_data = self.tinkoff_client.get_last_price(instrument["figi"])
        if not price_data:
            await loading_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {ticker}", parse_mode=ParseMode.MARKDOWN
            )
            return None

        return price_data.price.units + price_data.price.nano / 1_000_000_000

    def _format_risk_result(
        self, ticker, position_analysis, sl_tp_analysis, entry_price, stop_loss_price
    ):
        """Format risk analysis result text."""
        if not position_analysis.get("approved", False):
            result_text = f"‚ùå *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í {ticker}*\n\n"
            result_text += "üö´ *–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n"
            result_text += (
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {position_analysis.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
            )
            result_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            result_text += "‚Ä¢ –°–Ω–∏–∑—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
            result_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å\n"
            result_text += "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π"
            return result_text

        risk_emoji = {"LOW": "üü¢", "MEDIUM": "üü°", "HIGH": "üü†", "EXTREME": "üî¥"}
        emoji = risk_emoji.get(position_analysis["risk_level"], "‚ö™")

        result_text = f"‚öñÔ∏è *–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í {ticker}*\n\n"
        result_text += "üí∞ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏:*\n"
        result_text += f"üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f} ‚ÇΩ\n"
        result_text += f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss_price:.2f} ‚ÇΩ\n"
        result_text += f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {sl_tp_analysis['take_profit_price']:.2f} ‚ÇΩ\n\n"

        result_text += "üìä *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è:*\n"
        result_text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π: {position_analysis['shares_count']}\n"
        result_text += f"üíµ –°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏: {position_analysis['position_amount']:,.0f} ‚ÇΩ\n"
        result_text += f"üìà –î–æ–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {position_analysis['position_percent']:.1f}%\n\n"

        result_text += "‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:*\n"
        result_text += f"{emoji} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {position_analysis['risk_level']}\n"
        result_text += f"üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {position_analysis['risk_amount']:,.0f} ‚ÇΩ\n"
        result_text += f"üìâ –†–∏—Å–∫ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞: {position_analysis['risk_percent']:.2f}%\n"
        result_text += f"‚öñÔ∏è –†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:{sl_tp_analysis['risk_reward_ratio']:.1f}\n\n"

        result_text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n"
        result_text += f"{position_analysis['recommendation']}\n\n"

        result_text += "üìã *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        result_text += f"‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø: {sl_tp_analysis['trailing_stop_distance']:.2f} ‚ÇΩ\n"
        result_text += "‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è\n"
        result_text += "‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è\n\n"

        result_text += "*üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        result_text += f"‚Ä¢ `/price {ticker}` - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n"
        result_text += f"‚Ä¢ `/analysis {ticker}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        result_text += f"‚Ä¢ `/news {ticker}` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"

        result_text += "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ 100,000 ‚ÇΩ. "
        result_text += "–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç."

        return result_text

    async def risk_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /risk TICKER."""
        if not context.args:
            await update.message.reply_text(
                "‚öñÔ∏è *–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ü–∏–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/risk TICKER [–¶–ï–ù–ê_–í–•–û–î–ê] [–°–¢–û–ü_–õ–û–°–°]`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/risk SBER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ\n"
                "‚Ä¢ `/risk SBER 100 93` - –∞–Ω–∞–ª–∏–∑ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n\n"
                "üìä –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞\n"
                "‚Ä¢ –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞\n"
                "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        ticker = context.args[0].upper()
        loading_msg = await update.message.reply_text(
            f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∏—Å–∫–∏ –¥–ª—è *{ticker}*...\n"
            "üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...",
            parse_mode=ParseMode.MARKDOWN,
        )

        try:
            entry_price, stop_loss_price = await self._parse_risk_params(
                context.args, loading_msg, ticker
            )
            if entry_price is None and len(context.args) >= 2:
                return  # Error already handled

            if entry_price is None:
                entry_price = await self._get_current_price(ticker, loading_msg)
                if entry_price is None:
                    return  # Error already handled

            risk_manager = RiskManager()

            if stop_loss_price is None:
                sl_tp = risk_manager.calculate_stop_loss_take_profit(
                    ticker=ticker, entry_price=entry_price, signal_direction="BUY"
                )
                stop_loss_price = sl_tp["stop_loss_price"]

            account_balance = 100000.0
            position_analysis = risk_manager.calculate_position_size(
                ticker=ticker,
                entry_price=entry_price,
                stop_loss_price=stop_loss_price,
                account_balance=account_balance,
                confidence_score=0.6,
            )

            sl_tp_analysis = risk_manager.calculate_stop_loss_take_profit(
                ticker=ticker, entry_price=entry_price, signal_direction="BUY"
            )

            result_text = self._format_risk_result(
                ticker, position_analysis, sl_tp_analysis, entry_price, stop_loss_price
            )

            await loading_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)
            logger.info(
                f"–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ {ticker} –∑–∞–≤–µ—Ä—à–µ–Ω: —Ä–∏—Å–∫ {position_analysis.get('risk_percent', 0):.2f}%"
            )

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ {ticker}*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞\n"
            error_msg += "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/risk SBER 100 93` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n"
            error_msg += "- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"

            await loading_msg.edit_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            logger.error(f"Risk command error for {ticker}: {e}")

    def _format_portfolio_summary(self, summary: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è Telegram."""
        from datetime import datetime

        text = "üíº **–ü–û–†–¢–§–ï–õ–¨**\n\n"
        text += f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {summary['cash_balance']:,.0f} ‚ÇΩ\n"
        text += f"üìà **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π:** {summary['portfolio_value'] - summary['cash_balance']:,.0f} ‚ÇΩ\n"
        text += f"üíé **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {summary['portfolio_value']:,.0f} ‚ÇΩ\n"
        text += f"üìä **P&L:** {summary['unrealized_pnl']:+,.0f} ‚ÇΩ ({summary['unrealized_pnl_percent']:+.2f}%)\n\n"

        if summary["positions"]:
            text += "üìã **–ü–û–ó–ò–¶–ò–ò:**\n"
            for pos in summary["positions"]:
                pnl_emoji = "üü¢" if pos["unrealized_pnl"] >= 0 else "üî¥"
                text += f"{pnl_emoji} **{pos['ticker']}**: {pos['quantity']} —à—Ç √ó {pos['current_price']:.2f} ‚ÇΩ\n"
                text += f"   P&L: {pos['unrealized_pnl']:+,.0f} ‚ÇΩ ({pos['unrealized_pnl_percent']:+.2f}%) | –í–µ—Å: {pos['weight_percent']:.1f}%\n\n"
        else:
            text += "üìã **–ü–æ–∑–∏—Ü–∏–π –Ω–µ—Ç**\n\n"

        text += f"üïê **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%H:%M:%S')}"
        return text

    async def portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio."""
        loading_msg = await update.message.reply_text(
            "üíº –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...", parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
            await self.portfolio_manager.update_portfolio_prices()
            summary = self.portfolio_manager.get_portfolio_summary()

            if "error" in summary:
                await loading_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {summary['error']}",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            portfolio_text = self._format_portfolio_summary(summary)

            await loading_msg.edit_text(portfolio_text, parse_mode=ParseMode.MARKDOWN)

            logger.info("–°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Portfolio command error: {e}")

    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics."""
        loading_msg = await update.message.reply_text(
            "üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...\n"
            "üî¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏...\n"
            "üìà –í—ã—á–∏—Å–ª—è—é Sharpe ratio –∏ VaR...",
            parse_mode=ParseMode.MARKDOWN,
        )

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Portfolio Analytics
            from portfolio_analytics import PortfolioAnalytics

            analytics = PortfolioAnalytics(self.portfolio_manager)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            days = 30
            if context.args and context.args[0].isdigit():
                days = min(90, max(7, int(context.args[0])))

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = await analytics.calculate_portfolio_metrics(days=days)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram
            result_text = analytics.format_metrics_for_telegram(metrics)

            await loading_msg.edit_text(result_text, parse_mode=None)

            logger.info(
                f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {metrics.positions_count} –ø–æ–∑–∏—Ü–∏–π, "
                f"Sharpe {metrics.sharpe_ratio:.2f}"
            )

        except Exception as e:
            error_msg = "‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            error_msg += "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ\n"
            error_msg += "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞\n"
            error_msg += "- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
            error_msg += "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/portfolio` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π"

            await loading_msg.edit_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            logger.error(f"Analytics command error: {e}")

    async def buy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy TICKER QUANTITY."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "üí∞ *–ü–æ–∫—É–ø–∫–∞ –∞–∫—Ü–∏–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/buy TICKER QUANTITY`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/buy SBER 100` - –∫—É–ø–∏—Ç—å 100 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/buy GAZP 50` - –∫—É–ø–∏—Ç—å 50 –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞\n\n"
                "üí° –ü–æ–∫—É–ø–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        ticker = context.args[0].upper()
        try:
            quantity = int(context.args[1])
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º", parse_mode=ParseMode.MARKDOWN
            )
            return

        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        loading_msg = await update.message.reply_text(
            f"üí∞ –ü–æ–∫—É–ø–∞—é {quantity} –∞–∫—Ü–∏–π {ticker}...", parse_mode=ParseMode.MARKDOWN
        )

        try:
            result = await self.portfolio_manager.buy_stock(ticker, quantity)

            if result["success"]:
                buy_text = f"""
üí∞ *–ü–û–ö–£–ü–ö–ê–í–´–ü–û–õ–ù–ï–ù–ê*

üéØ *–ê–∫—Ü–∏—è:* {ticker}
üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {result['quantity']} —à—Ç
üíµ *–¶–µ–Ω–∞:* {result['price']:.2f} ‚ÇΩ
üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* {result['commission']:.2f} ‚ÇΩ
üí≥ *–û–±—â–∞—è —Å—É–º–º–∞:* {result['total_cost']:,.0f} ‚ÇΩ

üí∞ *–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:* {result['new_cash_balance']:,.0f} ‚ÇΩ

üéâ –ê–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å!

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                """
            else:
                buy_text = f"""
‚ùå *–û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò*

üéØ *–ê–∫—Ü–∏—è:* {ticker}
üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity} —à—Ç

‚ùå *–ü—Ä–∏—á–∏–Ω–∞:* {result['error']}

üí° *–°–æ–≤–µ—Ç—ã:*
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ä–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
                """

            await loading_msg.edit_text(buy_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ {ticker}: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Buy command error for {ticker}: {e}")

    async def sell_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell TICKER QUANTITY."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "üìà *–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/sell TICKER QUANTITY`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/sell SBER 25` - –ø—Ä–æ–¥–∞—Ç—å 25 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/sell GAZP 30` - –ø—Ä–æ–¥–∞—Ç—å 30 –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞\n\n"
                "üí° –ü—Ä–æ–¥–∞–∂–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ\n"
                "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π",
                parse_mode=ParseMode.MARKDOWN,
            )

    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /analysis TICKER - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/analysis TICKER`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/analysis SBER` - –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                    "‚Ä¢ `/analysis GAZP` - –∞–Ω–∞–ª–∏–∑ –ì–∞–∑–ø—Ä–æ–º–∞\n"
                    "‚Ä¢ `/analysis YNDX` - –∞–Ω–∞–ª–∏–∑ –Ø–Ω–¥–µ–∫—Å–∞\n\n"
                    "üìà –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: RSI, MACD, Bollinger Bands, —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
                    parse_mode="HTML",
                )
                return

            ticker = context.args[0].upper()
            loading_msg = await update.message.reply_text(
                f"üìä –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {ticker}...", parse_mode="HTML"
            )

            try:
                from technical_analysis import get_ticker_analysis_for_telegram

                result_text = await get_ticker_analysis_for_telegram(ticker)

                await loading_msg.edit_text(result_text, parse_mode="HTML")
                logger.info(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {ticker} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            except Exception as e:
                await loading_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {ticker}: {str(e)[:100]}...\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏\n"
                    "- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                    "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º",
                    parse_mode="HTML",
                )
                logger.error(f"–û—à–∏–±–∫–∞ analysis_command –¥–ª—è {ticker}: {e}")

        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML"
            )
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ analysis_command: {e}")

    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /signal TICKER - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üéØ **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/signal TICKER`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/signal SBER` - —Å–∏–≥–Ω–∞–ª –ø–æ –°–±–µ—Ä–±–∞–Ω–∫—É\n"
                    "‚Ä¢ `/signal GAZP` - —Å–∏–≥–Ω–∞–ª –ø–æ –ì–∞–∑–ø—Ä–æ–º—É\n"
                    "‚Ä¢ `/signal YNDX` - —Å–∏–≥–Ω–∞–ª –ø–æ –Ø–Ω–¥–µ–∫—Å—É\n\n"
                    "üß† –û–±—ä–µ–¥–∏–Ω—è–µ—Ç: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (60%) + –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (40%)",
                    parse_mode="Markdown",
                )
                return

            ticker = context.args[0].upper()
            loading_msg = await update.message.reply_text(
                f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker}...\n"
                f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–æ–≤–æ—Å—Ç–∏...",
                parse_mode="Markdown",
            )

            try:
                from ai_signal_integration import AISignalIntegration

                ai_signal = AISignalIntegration()
                signal_result = await ai_signal.analyze_ticker(ticker)

                if signal_result:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram
                    result_text = f"üéØ **–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ {ticker}**\n\n"

                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    signal_strength = str(signal_result.signal_strength).replace(
                        "SignalStrength.", ""
                    )
                    combined_score = signal_result.combined_score
                    confidence = signal_result.confidence

                    signal_emoji = {
                        "STRONG_BUY": "üíö",
                        "BUY": "üü¢",
                        "HOLD": "üü°",
                        "SELL": "üü†",
                        "STRONG_SELL": "üî¥",
                    }.get(signal_strength, "‚ö™")

                    result_text += f"{signal_emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {signal_strength}**\n"
                    result_text += f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {combined_score:+.2f}\n"
                    result_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%}\n\n"

                    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    technical_score = signal_result.technical_score
                    news_score = signal_result.news_sentiment_score

                    result_text += "üìä **–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (60% –≤–µ—Å–∞):**\n"
                    result_text += f"üìà –û—Ü–µ–Ω–∫–∞: {technical_score:+.2f}\n"

                    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    tech_indicators = signal_result.technical_indicators
                    current_price = tech_indicators.get("current_price", 0)
                    rsi_data = tech_indicators.get("rsi", {})
                    macd_data = tech_indicators.get("macd", {})

                    result_text += (
                        f"‚Ä¢ RSI: {rsi_data.get('value', 0):.1f} ({rsi_data.get('level', 'N/A')})\n"
                    )
                    result_text += f"‚Ä¢ MACD: {macd_data.get('trend', 'N/A')}\n\n"

                    result_text += "üì∞ **–ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô (40% –≤–µ—Å–∞):**\n"
                    result_text += f"ü§ñ –û—Ü–µ–Ω–∫–∞: {news_score:+.2f}\n"
                    result_text += f"üìù –°–≤–æ–¥–∫–∞: {signal_result.news_summary}\n\n"

                    result_text += f"‚öñÔ∏è –§–æ—Ä–º—É–ª–∞: ({technical_score:+.2f} √ó 0.6) + ({news_score:+.2f} √ó 0.4) = {combined_score:+.2f}\n\n"

                    # –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    result_text += "üí∞ **–¢–û–†–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
                    result_text += f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price:.2f} ‚ÇΩ\n"
                    result_text += f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {signal_result.stop_loss_price:.2f} ‚ÇΩ\n"
                    result_text += f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal_result.take_profit_price:.2f} ‚ÇΩ\n"
                    result_text += f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal_result.recommended_position_size:.1%} –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
                    result_text += (
                        f"‚öñÔ∏è –†–∏—Å–∫: {str(signal_result.risk_level).replace('RiskLevel.', '')}\n\n"
                    )

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
                    result_text += f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    result_text += "üí° **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
                    result_text += f"‚Ä¢ `/analysis {ticker}` - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
                    result_text += f"‚Ä¢ `/news {ticker}` - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                    result_text += f"‚Ä¢ `/risk {ticker}` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–∫–∏\n\n"
                    result_text += "‚ö†Ô∏è *–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π*"

                    await loading_msg.edit_text(result_text, parse_mode="Markdown")
                    logger.info(
                        f"–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª {ticker} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal_strength} ({combined_score:+.2f})"
                    )

                else:
                    await loading_msg.edit_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker}.\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ:\n"
                        f"‚Ä¢ `/analysis {ticker}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
                        f"‚Ä¢ `/news {ticker}` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
                        parse_mode="Markdown",
                    )

            except Exception as e:
                await loading_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {ticker}: {str(e)[:100]}...\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏\n"
                    "- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                    "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ /analysis –∏ /news",
                    parse_mode="Markdown",
                )
                logger.error(f"–û—à–∏–±–∫–∞ signal_command –¥–ª—è {ticker}: {e}")

        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown",
            )
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ signal_command: {e}")

    async def strategies_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategies."""
        loading_msg = await update.message.reply_text(
            "üìä –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...", parse_mode=ParseMode.MARKDOWN
        )

        try:
            from strategy_engine import get_strategy_engine

            engine = get_strategy_engine()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            all_strategies = engine.get_all_strategies()
            active_strategies = engine.get_active_strategies()

            strategies_text = "*üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–û–†–ì–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"

            for strategy_id, info in all_strategies.items():
                status_emoji = {
                    "inactive": "‚ö´",
                    "active": "üü¢",
                    "paused": "üü°",
                    "error": "üî¥",
                    "stopped": "‚ö™",
                }.get(info["status"], "‚ùì")

                strategies_text += f"*{info['name']}*\n"
                strategies_text += f"{status_emoji} –°—Ç–∞—Ç—É—Å: {info['status'].upper()}\n"
                strategies_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
                strategies_text += f"üìà –¢–∏–∫–µ—Ä—ã: {', '.join(info['supported_tickers'])}\n"
                strategies_text += f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {info['signals_generated']}\n\n"

            strategies_text += "*üí° –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:*\n"
            strategies_text += "‚Ä¢ `/start_strategy rsi_mean_reversion SBER` - –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            strategies_text += "‚Ä¢ `/stop_strategy rsi_mean_reversion` - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            strategies_text += "‚Ä¢ `/strategy_status` - —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            strategies_text += "‚Ä¢ `/strategy_signals SBER` - —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞\n\n"

            if active_strategies:
                strategies_text += f"*üöÄ –ê–ö–¢–ò–í–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô: {len(active_strategies)}*"
            else:
                strategies_text += "*üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π*"

            await loading_msg.edit_text(strategies_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategies command error: {e}")

    async def start_strategy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_strategy."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "*üöÄ –ó–ê–ü–£–°–ö –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/start_strategy STRATEGY_ID TICKER`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/start_strategy rsi_mean_reversion SBER`\n"
                "‚Ä¢ `/start_strategy macd_trend_following GAZP`\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n"
                "‚Ä¢ `rsi_mean_reversion` - RSI Mean Reversion\n"
                "‚Ä¢ `macd_trend_following` - MACD Trend Following\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategies` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        strategy_id = context.args[0]
        ticker = context.args[1].upper()

        loading_msg = await update.message.reply_text(
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é *{strategy_id}* –¥–ª—è *{ticker}*...",
            parse_mode=ParseMode.MARKDOWN,
        )

        try:
            from strategy_engine import get_strategy_engine

            engine = get_strategy_engine()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            success = engine.start_strategy(strategy_id, [ticker])

            if success:
                result_text = "‚úÖ *–°–¢–†–ê–¢–ï–ì–ò–Ø –ó–ê–ü–£–©–ï–ù–ê*\n\n"
                result_text += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: *{strategy_id}*\n"
                result_text += f"üìà –¢–∏–∫–µ—Ä: *{ticker}*\n"
                result_text += f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n\n"
                result_text += f"üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {ticker}\n"
                result_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategy_signals {ticker}` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"
            else:
                result_text = "‚ùå *–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê*\n\n"
                result_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é *{strategy_id}*\n\n"
                result_text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                result_text += "‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                result_text += "‚Ä¢ –¢–∏–∫–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
                result_text += "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞"

            await loading_msg.edit_text(result_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Start strategy error: {e}")

    async def stop_strategy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_strategy."""
        if not context.args:
            await update.message.reply_text(
                "*üõë –û–°–¢–ê–ù–û–í–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/stop_strategy STRATEGY_ID`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/stop_strategy rsi_mean_reversion`\n"
                "‚Ä¢ `/stop_strategy macd_trend_following`\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategy_status` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        strategy_id = context.args[0]

        try:
            from strategy_engine import get_strategy_engine

            engine = get_strategy_engine()

            success = engine.stop_strategy(strategy_id)

            if success:
                result_text = "‚úÖ *–°–¢–†–ê–¢–ï–ì–ò–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê*\n\n"
                result_text += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: *{strategy_id}*\n"
                result_text += f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}"
            else:
                result_text = "‚ö†Ô∏è *–°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï –ê–ö–¢–ò–í–ù–ê*\n\n"
                result_text += f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è *{strategy_id}* –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞"

            await update.message.reply_text(result_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Stop strategy error: {e}")

    async def strategy_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategy_status."""
        try:
            from strategy_engine import get_strategy_engine

            engine = get_strategy_engine()

            active_strategies = engine.get_active_strategies()

            if not active_strategies:
                status_text = "*üìä –°–¢–ê–¢–£–° –°–¢–†–ê–¢–ï–ì–ò–ô*\n\n"
                status_text += "üí§ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π*\n\n"
                status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategies` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            else:
                status_text = f"*üìä –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò ({len(active_strategies)})*\n\n"

                for strategy_id, info in active_strategies.items():
                    status_text += f"üü¢ *{info['name']}*\n"
                    status_text += f"üÜî ID: `{strategy_id}`\n"
                    status_text += f"üìà –¢–∏–∫–µ—Ä—ã: {', '.join(info['supported_tickers'])}\n"
                    status_text += f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {info['signals_generated']}\n"

                    if info["last_execution"]:
                        last_exec = datetime.fromisoformat(info["last_execution"])
                        status_text += (
                            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {last_exec.strftime('%H:%M:%S')}\n"
                        )

                    status_text += "\n"

                status_text += "*üí° –ö–æ–º–∞–Ω–¥—ã:*\n"
                status_text += "‚Ä¢ `/stop_strategy STRATEGY_ID` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
                status_text += "‚Ä¢ `/strategy_signals TICKER` - –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"

            await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategy status error: {e}")

    async def strategy_signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategy_signals."""
        if not context.args:
            await update.message.reply_text(
                "*üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/strategy_signals TICKER`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/strategy_signals SBER`\n"
                "‚Ä¢ `/strategy_signals GAZP`\n\n"
                "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        ticker = context.args[0].upper()

        loading_msg = await update.message.reply_text(
            f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è *{ticker}*...", parse_mode=ParseMode.MARKDOWN
        )

        try:
            from strategy_engine import get_strategy_engine

            engine = get_strategy_engine()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            result = await engine.execute_strategy_signals(ticker)

            if result["signals_count"] == 0:
                signals_text = f"*üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´ {ticker}*\n\n"
                signals_text += "üí§ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π*\n\n"
                signals_text += result["message"]
            else:
                signals_text = f"*üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´ {ticker}*\n\n"

                # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                rec_emoji = {"BUY": "üü¢", "SELL": "üî¥", "HOLD": "üü°"}.get(
                    result["recommendation"], "‚ö™"
                )
                signals_text += f"{rec_emoji} *–ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {result['recommendation']}*\n"
                signals_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}\n"
                signals_text += f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['signals_count']}\n\n"

                # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
                if result["buy_signals"] > 0:
                    signals_text += f"üü¢ BUY —Å–∏–≥–Ω–∞–ª–æ–≤: {result['buy_signals']}\n"
                if result["sell_signals"] > 0:
                    signals_text += f"üî¥ SELL —Å–∏–≥–Ω–∞–ª–æ–≤: {result['sell_signals']}\n"

                signals_text += "\n*üìã –î–ï–¢–ê–õ–ò –°–ò–ì–ù–ê–õ–û–í:*\n"
                for signal in result["signals"]:
                    signal_emoji = {"BUY": "üü¢", "SELL": "üî¥", "HOLD": "üü°"}.get(
                        signal["action"], "‚ö™"
                    )
                    signals_text += f"{signal_emoji} {signal['strategy_id']}: {signal['action']} ({signal['confidence']:.2f})\n"

                signals_text += f"\n‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}"

            await loading_msg.edit_text(signals_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategy signals error: {e}")

    async def auto_trading_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_trading on/off."""
        if not context.args:
            await update.message.reply_text(
                "üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/auto_trading on` - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
                "‚Ä¢ `/auto_trading off` - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
                "‚Ä¢ `/auto_trading status` - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n\n"
                "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        action = context.args[0].lower()

        try:
            from strategy_executor import get_strategy_executor

            executor = get_strategy_executor()

            if action == "on":
                from strategy_executor import ExecutionMode

                success = executor.enable_auto_trading(ExecutionMode.AUTOMATIC)
                if success:
                    text = "ü§ñ *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ê*\n\n"
                    text += "‚úÖ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
                    text += f"‚öôÔ∏è –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {executor.min_confidence_threshold:.1%}\n"
                    text += f"üéØ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {executor.max_position_size_pct:.1%}\n\n"
                    text += "üí° *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n"
                    text += "‚Ä¢ `/auto_execute SBER` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
                    text += "‚Ä¢ `/execution_status` - —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π\n"
                    text += "‚Ä¢ `/auto_settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                else:
                    text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"

            elif action == "off":
                success = executor.disable_auto_trading()
                if success:
                    text = "‚èπÔ∏è *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø –í–´–ö–õ–Æ–ß–ï–ù–ê*\n\n"
                    text += "üîí –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                    text += "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
                    text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auto_trading on` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è"
                else:
                    text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"

            elif action == "status":
                status = executor.get_execution_status()
                mode = status.get("execution_mode", "unknown")
                enabled_tickers = status.get("enabled_tickers", [])
                daily_executions = status.get("daily_executions", 0)
                max_daily = status.get("max_daily_trades", 5)

                text = "üìä *–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–û–†–ì–û–í–õ–ò*\n\n"
                text += f"üîÑ –†–µ–∂–∏–º: {mode.upper()}\n"
                text += f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(enabled_tickers)}\n"
                if enabled_tickers:
                    text += f"üéØ –¢–∏–∫–µ—Ä—ã: {', '.join(enabled_tickers)}\n"
                text += f"üìä –°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {daily_executions}/{max_daily}\n"
                text += f"‚öôÔ∏è –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status.get('min_confidence_threshold', 0):.1%}"
            else:
                text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on, off, status"

            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π: {str(e)}",
                parse_mode=ParseMode.MARKDOWN,
            )
            logger.error(f"Auto trading command error: {e}")

    def _handle_ticker_list(self, executor) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤."""
        status = executor.get_execution_status()
        enabled_tickers = status.get("enabled_tickers", [])

        text = "üìã *–¢–ò–ö–ï–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"
        if enabled_tickers:
            text += "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n"
            for ticker in enabled_tickers:
                text += f"  ‚Ä¢ {ticker}\n"
        else:
            text += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n"
        text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auto_execute TICKER` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        return text

    def _handle_ticker_remove(self, executor, ticker: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞."""
        success = executor.remove_ticker_from_execution(ticker)
        if success:
            return f"‚úÖ –¢–∏–∫–µ—Ä *{ticker}* —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}"

    def _handle_ticker_add(self, executor, ticker: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞."""
        supported_tickers = ["SBER", "GAZP", "YNDX", "LKOH", "ROSN", "NVTK", "GMKN"]

        if ticker not in supported_tickers:
            text = f"‚ùå –¢–∏–∫–µ—Ä {ticker} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
            text += f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(supported_tickers)}"
            return text

        success = executor.add_ticker_for_execution(ticker)
        if success:
            text = f"‚úÖ *{ticker}* –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            text += f"ü§ñ –¢–µ–ø–µ—Ä—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {ticker} –±—É–¥—É—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            text += "‚öôÔ∏è –ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            text += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `/execution_status`"
            return text
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}"

    async def auto_execute_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_execute TICKER."""
        if not context.args:
            await update.message.reply_text(
                "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/auto_execute SBER` - –¥–æ–±–∞–≤–∏—Ç—å SBER –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é\n"
                "‚Ä¢ `/auto_execute remove SBER` - —É–±—Ä–∞—Ç—å SBER –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n"
                "‚Ä¢ `/auto_execute list` - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã: SBER, GAZP, YNDX, LKOH, ROSN, NVTK, GMKN",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        try:
            from strategy_executor import get_strategy_executor

            executor = get_strategy_executor()

            if context.args[0].lower() == "list":
                text = self._handle_ticker_list(executor)
            elif len(context.args) >= 2 and context.args[0].lower() == "remove":
                ticker = context.args[1].upper()
                text = self._handle_ticker_remove(executor, ticker)
            else:
                ticker = context.args[0].upper()
                text = self._handle_ticker_add(executor, ticker)

            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞–º–∏: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Auto execute command error: {e}")

    async def execution_status_command(self, update: Update, context:ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /execution_status."""
        try:
            from strategy_executor import get_strategy_executor

            executor = get_strategy_executor()

            status = executor.get_execution_status()

            text = "üìä *–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            mode = status.get("execution_mode", "unknown")
            enabled_tickers = status.get("enabled_tickers", [])
            daily_executions = status.get("daily_executions", 0)
            max_daily = status.get("max_daily_trades", 5)
            total_executions = status.get("total_executions", 0)

            if mode == "automatic":
                text += "üü¢ –†–µ–∂–∏–º: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï\n"
            elif mode == "disabled":
                text += "üî¥ –†–µ–∂–∏–º: –û–¢–ö–õ–Æ–ß–ï–ù–û\n"
            else:
                text += f"üü° –†–µ–∂–∏–º: {mode.upper()}\n"

            text += f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(enabled_tickers)}\n"
            if enabled_tickers:
                text += f"üéØ –¢–∏–∫–µ—Ä—ã: {', '.join(enabled_tickers)}\n"

            text += f"üìä –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_executions}/{max_daily}\n"
            text += f"üìà –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {total_executions}\n"
            text += f"‚öôÔ∏è –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status.get('min_confidence_threshold', 0):.1%}\n\n"

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            recent_executions = status.get("recent_executions", [])
            if recent_executions:
                text += "üìã *–ü–û–°–õ–ï–î–ù–ò–ï –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:*\n"
                for execution in recent_executions[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    ticker = execution.get("ticker", "N/A")
                    action = execution.get("signal_action", "N/A")
                    status_exec = execution.get("status", "N/A")
                    confidence = execution.get("signal_confidence", 0)

                    if status_exec == "executed":
                        emoji = "‚úÖ"
                    elif status_exec == "rejected":
                        emoji = "‚ö†Ô∏è"
                    else:
                        emoji = "‚ùå"

                    text += f"{emoji} {ticker}: {action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})\n"
            else:
                text += "üìã *–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ*\n"

            text += "\nüí° *–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
            text += "‚Ä¢ `/auto_trading on/off` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n"
            text += "‚Ä¢ `/auto_execute TICKER` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
            text += "‚Ä¢ `/auto_settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Execution status command error: {e}")

    async def auto_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_settings."""
        try:
            from strategy_executor import get_strategy_executor

            executor = get_strategy_executor()

            text = "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–û–†–ì–û–í–õ–ò*\n\n"

            text += "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
            text += f"‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {executor.min_confidence_threshold:.1%}\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {executor.max_position_size_pct:.1%}\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {executor.get_execution_status().get('max_daily_trades', 5)}\n\n"

            text += "üõ°Ô∏è *–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:*\n"
            text += "‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: 1,000,000 ‚ÇΩ\n"
            text += "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 0.05%\n"
            text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã\n\n"

            text += "ü§ñ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n"
            text += "‚Ä¢ RSI Mean Reversion\n"
            text += "‚Ä¢ MACD Trend Following\n\n"

            text += "üìä *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:*\n"
            text += "‚Ä¢ SBER - –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫\n"
            text += "‚Ä¢ GAZP - –ü–ê–û –ì–∞–∑–ø—Ä–æ–º\n"
            text += "‚Ä¢ YNDX - –Ø–Ω–¥–µ–∫—Å\n"
            text += "‚Ä¢ LKOH - –õ–£–ö–û–ô–õ\n"
            text += "‚Ä¢ ROSN - –†–æ—Å–Ω–µ—Ñ—Ç—å\n"
            text += "‚Ä¢ NVTK - –ù–û–í–ê–¢–≠–ö\n"
            text += "‚Ä¢ GMKN - –ì–ú–ö –ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å\n\n"

            text += "‚ö†Ô∏è *–í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
            text += "‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ Tinkoff\n"
            text += "‚Ä¢ –¢–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤\n\n"

            text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            text += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞\n"
            text += "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ `/execution_status`\n"
            text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ `/portfolio`"

            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Auto settings command error: {e}")

    async def portfolio_strategies_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio_strategies."""
        try:
            coordinator = self.portfolio_coordinator
            allocations = coordinator.get_strategy_allocations()
            status = coordinator.get_portfolio_status()

            if not allocations:
                text = """
üìä *–ü–û–†–¢–§–ï–õ–¨ –°–¢–†–ê–¢–ï–ì–ò–ô*

‚ùå –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

üí° *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
- `/coordinate_portfolio` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
- `/strategy_weights` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞–º–∏
- `/portfolio_performance` - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

*–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã Strategy Engine.*
                """
            else:
                text = f"""
üìä *–ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ü–û–†–¢–§–ï–õ–Ø*

üìà *–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:*
- –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {status.total_strategies}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status.active_strategies}
- –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {status.performance_score:.2%}
- –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {status.cash_allocation:.1%}

"""

                for i, (key, allocation) in enumerate(allocations.items(), 1):
                    strategy_name = allocation.strategy_id.replace('_', ' ').title()
                    text += f"""
üéØ *{i}. {strategy_name} ({allocation.ticker}):*
- –í–µ—Å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {allocation.weight:.1%}
- –¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {allocation.target_allocation:.1%}
- –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {allocation.current_allocation:.1%}
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {allocation.performance_score:.2%}
- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {allocation.last_rebalance.strftime('%H:%M %d.%m')}

"""

                text += f"""
üìä *–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è:*
- –°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω–∞' if coordinator.enabled else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞'}
- –ú–µ—Ç–æ–¥ –≤–µ—Å–æ–≤: {coordinator.weight_method.value.replace('_', ' ').title()}
- –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è: {coordinator.last_coordination.strftime('%H:%M %d.%m') if coordinator.last_coordination else '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å'}

üí° *–ö–æ–º–∞–Ω–¥—ã:*
- `/coordinate_portfolio` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
- `/strategy_weights` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤
- `/portfolio_performance` - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                """

            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Portfolio strategies command error: {e}")

    async def strategy_weights_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategy_weights."""
        try:
            coordinator = self.portfolio_coordinator
            allocations = coordinator.get_strategy_allocations()

            if not allocations:
                text = """
‚öñÔ∏è *–£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–°–ê–ú–ò –°–¢–†–ê–¢–ï–ì–ò–ô*

‚ùå –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞–º–∏

üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã Strategy Engine, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è.
                """
            else:
                text = f"""
‚öñÔ∏è *–í–ï–°–ê –°–¢–†–ê–¢–ï–ì–ò–ô –í –ü–û–†–¢–§–ï–õ–ï*

üìä *–¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥:* {coordinator.weight_method.value.replace('_', ' ').title()}
üéØ *–ü–æ—Ä–æ–≥ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:* {coordinator.rebalance_threshold:.1%}

"""

                total_weight = sum(a.weight for a in allocations.values())

                for key, allocation in allocations.items():
                    strategy_name = allocation.strategy_id.replace('_', ' ').title()
                    weight_pct = allocation.weight * 100
                    target_pct = allocation.target_allocation * 100
                    current_pct = allocation.current_allocation * 100

                    deviation = abs(current_pct - target_pct)
                    status_emoji = "üü¢" if deviation <= coordinator.rebalance_threshold * 100 else "üü°"

                    text += f"""
{status_emoji} *{strategy_name} ({allocation.ticker}):*
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: {weight_pct:.1f}%
- –¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {target_pct:.1f}%
- –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {current_pct:.1f}%
- –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}%

"""

                text += f"""
üìä *–ò—Ç–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:* {total_weight:.1%}
üí∞ *–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:* {(1-total_weight):.1%}

üí° *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
- `/coordinate_portfolio` - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ > {coordinator.rebalance_threshold:.1%}
                """

            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategy weights command error: {e}")

    async def coordinate_portfolio_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /coordinate_portfolio."""
        loading_msg = await update.message.reply_text(
            "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è...\n"
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            coordinator = self.portfolio_coordinator

            # –í–∫–ª—é—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            if not coordinator.enabled:
                from portfolio_coordinator import StrategyWeight
                coordinator.enable_coordination(StrategyWeight.EQUAL)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
            result = await coordinator.coordinate_portfolio()

            if result["success"]:
                text = f"""‚úÖ *–ö–û–û–†–î–ò–ù–ê–¶–ò–Ø –ü–û–†–¢–§–ï–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ê*

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {result['strategies_count']}
- –û–±—â–∏–π –≤–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {result['total_weight']:.1f}
- –°—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {result['coordination_status']}
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –ù–µ —É–∫–∞–∑–∞–Ω–æ

üí° *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
- /portfolio_strategies - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- /strategy_weights - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
- /portfolio_performance - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

            else:
                text = f"""
‚ùå *–û–®–ò–ë–ö–ê –ö–û–û–†–î–ò–ù–ê–¶–ò–ò –ü–û–†–¢–§–ï–õ–Ø*

–ü—Ä–∏—á–∏–Ω–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: `/portfolio_strategies`
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: `/status`
                """

            await loading_msg.edit_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Coordinate portfolio command error: {e}")

    async def portfolio_performance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /portfolio_performance."""
        loading_msg = await update.message.reply_text(
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            coordinator = self.portfolio_coordinator
            status = coordinator.get_portfolio_status()
            allocations = coordinator.get_strategy_allocations()

            if not allocations:
                text = """
üìä *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û–†–¢–§–ï–õ–Ø*

‚ùå –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

üí° –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –¥–∞–π—Ç–µ –∏–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                """
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
                try:
                    analytics = await self.portfolio_analytics.calculate_comprehensive_metrics()
                except:
                    analytics = None

                text = f"""
üìä *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û–†–¢–§–ï–õ–Ø*

üìà *–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:*
- –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {status.total_strategies}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {status.active_strategies}
- –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {status.performance_score:.2%}
- –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {status.risk_score:.2f}/1.0
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤: {status.total_allocation:.1%}

"""

                if analytics and 'returns' in analytics:
                    returns = analytics['returns']
                    risk_metrics = analytics.get('risk_metrics', {})

                    text += f"""
üí∞ *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:*
- –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns.get('total_return', 0):.2%}
- –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns.get('annualized_return', 0):.2%}

üõ°Ô∏è *–†–∏—Å–∫–∏:*
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {risk_metrics.get('volatility', 0):.1%}
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {risk_metrics.get('max_drawdown', 0):.1%}
- Sharpe ratio: {risk_metrics.get('sharpe_ratio', 0):.2f}

"""

                # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                text += "üéØ *–ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:*\n"
                for key, allocation in allocations.items():
                    strategy_name = allocation.strategy_id.replace('_', ' ').title()
                    perf_icon = "üìà" if allocation.performance_score > 0 else "üìâ" if allocation.performance_score < 0 else "‚ûñ"
                    risk_icon = "üü¢" if allocation.risk_score < 0.3 else "üü°" if allocation.risk_score < 0.7 else "üî¥"

                    text += f"""
{perf_icon} *{strategy_name} ({allocation.ticker}):*
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {allocation.performance_score:.2%}
- –†–∏—Å–∫: {risk_icon} {allocation.risk_score:.2f}
- –í–µ—Å: {allocation.weight:.1%}

"""

                text += f"""
üìÖ *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {status.last_rebalance.strftime('%H:%M %d.%m.%Y')}
- –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {coordinator.coordination_interval.total_seconds()/3600:.0f} —á–∞—Å–æ–≤

üí° *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:*
- `/coordinate_portfolio` - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
- `/strategy_weights` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
                """

            await loading_msg.edit_text(text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Portfolio performance command error: {e}")

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
        await update.message.reply_text(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {update.message.text}")

    def setup_handlers(self, app: Application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("status", self.status_command))
        app.add_handler(CommandHandler("price", self.price_command))
        app.add_handler(CommandHandler("accounts", self.accounts_command))
        app.add_handler(CommandHandler("news", self.news_command))
        app.add_handler(CommandHandler("risk", self.risk_command))
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è
        app.add_handler(CommandHandler("portfolio", self.portfolio_command))
        app.add_handler(CommandHandler("analytics", self.analytics_command))
        app.add_handler(CommandHandler("buy", self.buy_command))
        app.add_handler(CommandHandler("sell", self.sell_command))
        # –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞
        app.add_handler(CommandHandler("analysis", self.analysis_command))
        app.add_handler(CommandHandler("signal", self.signal_command))
        # –ö–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        app.add_handler(CommandHandler("strategies", self.strategies_command))
        app.add_handler(CommandHandler("start_strategy", self.start_strategy_command))
        app.add_handler(CommandHandler("stop_strategy", self.stop_strategy_command))
        app.add_handler(CommandHandler("strategy_status", self.strategy_status_command))
        app.add_handler(CommandHandler("strategy_signals", self.strategy_signals_command))
        # –ö–æ–º–∞–Ω–¥—ã StrategyExecutor
        app.add_handler(CommandHandler("auto_trading", self.auto_trading_command))
        app.add_handler(CommandHandler("auto_execute", self.auto_execute_command))
        app.add_handler(CommandHandler("execution_status", self.execution_status_command))
        app.add_handler(CommandHandler("auto_settings", self.auto_settings_command))

        # Portfolio coordination commands
        app.add_handler(CommandHandler("portfolio_strategies", self.portfolio_strategies_command))
        app.add_handler(CommandHandler("strategy_weights", self.strategy_weights_command))
        app.add_handler(CommandHandler("coordinate_portfolio", self.coordinate_portfolio_command))
        app.add_handler(CommandHandler("portfolio_performance", self.portfolio_performance_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.help_command))
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Trading Bot...")
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers(self.application)
            self.application.run_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    bot = TradingTelegramBot()
    bot.run()