
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
–∏—Ç–æ–≥–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏.
"""

import logging
from datetime import datetime
from typing import Dict, Optional
import asyncio

from technical_analysis import get_technical_analyzer
from news_analyzer import get_news_analyzer


logger = logging.getLogger(__name__)


class SignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        self.technical_analyzer = get_technical_analyzer()
        self.news_analyzer = get_news_analyzer()
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.weights = {
            'technical': 0.6,  # 60% —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            'news': 0.4        # 40% –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        }
        
        logger.info("SignalGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def generate_combined_signal(self, ticker: str) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.
        
        Args:
            ticker: –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏
            
        Returns:
            –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            ticker = ticker.upper()
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker}")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            technical_task = self.technical_analyzer.get_technical_analysis(ticker)
            news_task = self.news_analyzer.analyze_ticker_news(ticker, include_sentiment=True)
            
            technical_result, news_result = await asyncio.gather(
                technical_task, news_task, return_exceptions=True
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –æ—à–∏–±–∫–∏
            if isinstance(technical_result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {technical_result}")
                technical_result = None
                
            if isinstance(news_result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_result}")
                news_result = None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            combined_signal = self._combine_signals(ticker, technical_result, news_result)
            
            logger.info(f"–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª {ticker}: {combined_signal['signal']}")
            return combined_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker}: {e}")
            return self._create_error_signal(ticker, str(e))
    
    def _combine_signals(self, ticker: str, technical_result: Optional[Dict], 
                        news_result: Optional[Dict]) -> Dict:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            signal_values = {
                'STRONG_BUY': 2,
                'BUY': 1,
                'NEUTRAL_BULLISH': 0.5,
                'HOLD': 0,
                'NEUTRAL_BEARISH': -0.5,
                'SELL': -1,
                'STRONG_SELL': -2,
                'UNKNOWN': 0
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            technical_score = 0
            technical_confidence = 0
            if technical_result and technical_result.get('success'):
                tech_signal = technical_result.get('overall_signal', {}).get('signal', 'UNKNOWN')
                technical_score = signal_values.get(tech_signal, 0)
                technical_confidence = technical_result.get('overall_signal', {}).get('confidence', 0)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞  
            news_score = 0
            news_confidence = 0
            if news_result and news_result.get('success') and news_result.get('sentiment'):
                sentiment_score = news_result['sentiment'].get('sentiment_score', 0)
                news_score = sentiment_score * 2  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º [-1,1] –≤ [-2,2]
                news_confidence = news_result['sentiment'].get('confidence', 0)
            
            # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            combined_score = (
                technical_score * self.weights['technical'] +
                news_score * self.weights['news']
            )
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            combined_confidence = (
                technical_confidence * self.weights['technical'] +
                news_confidence * self.weights['news']
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–∏–≥–Ω–∞–ª
            if combined_score >= 1.2:
                signal = 'STRONG_BUY'
                emoji = 'üíö'
            elif combined_score >= 0.4:
                signal = 'BUY'  
                emoji = 'üü¢'
            elif combined_score <= -1.2:
                signal = 'STRONG_SELL'
                emoji = 'üî¥'
            elif combined_score <= -0.4:
                signal = 'SELL'
                emoji = 'üü†'
            else:
                signal = 'HOLD'
                emoji = 'üü°'
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return {
                'ticker': ticker,
                'company_name': technical_result.get('company_name', f'–ê–∫—Ü–∏—è {ticker}') if technical_result else f'–ê–∫—Ü–∏—è {ticker}',
                'timestamp': datetime.now().isoformat(),
                'success': True,
                'error_message': None,
                
                'combined_signal': {
                    'signal': signal,
                    'emoji': emoji,
                    'score': round(combined_score, 2),
                    'confidence': round(combined_confidence, 2),
                    'description': f'–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª ({signal})'
                },
                
                'components': {
                    'technical': {
                        'available': technical_result is not None and technical_result.get('success', False),
                        'signal': technical_result.get('overall_signal', {}).get('signal', 'UNKNOWN') if technical_result else 'UNKNOWN',
                        'score': technical_score,
                        'confidence': technical_confidence,
                        'weight': self.weights['technical']
                    },
                    'news': {
                        'available': news_result is not None and news_result.get('success', False) and news_result.get('sentiment'),
                        'signal': self._news_score_to_signal(news_score),
                        'score': news_score,
                        'confidence': news_confidence,
                        'weight': self.weights['news']
                    }
                },
                
                'details': {
                    'technical_analysis': technical_result,
                    'news_analysis': news_result
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return self._create_error_signal(ticker, f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    def _news_score_to_signal(self, news_score: float) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ score –≤ —Å–∏–≥–Ω–∞–ª."""
        if news_score >= 1.2:
            return 'STRONG_BUY'
        elif news_score >= 0.4:
            return 'BUY'
        elif news_score <= -1.2:
            return 'STRONG_SELL'
        elif news_score <= -0.4:
            return 'SELL'
        else:
            return 'HOLD'
    
    def _create_error_signal(self, ticker: str, error_message: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π."""
        return {
            'ticker': ticker,
            'company_name': f'–ê–∫—Ü–∏—è {ticker}',
            'timestamp': datetime.now().isoformat(),
            'success': False,
            'error_message': error_message,
            'combined_signal': {
                'signal': 'UNKNOWN',
                'emoji': '‚ö™',
                'score': 0.0,
                'confidence': 0.0,
                'description': '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        }
    
    def format_for_telegram(self, signal_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è Telegram."""
        if not signal_result['success']:
            return f"‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal_result['ticker']}*\n\n" \
                   f"–ü—Ä–∏—á–∏–Ω–∞: {signal_result['error_message']}"
        
        ticker = signal_result['ticker']
        company_name = signal_result['company_name']
        combined = signal_result['combined_signal']
        components = signal_result['components']
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text = f"üéØ *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ {ticker}*\n\n"
        text += f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {company_name}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª
        text += f"{combined['emoji']} *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {combined['signal']}*\n"
        text += f"üìä *–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:* {combined['score']:+.2f}\n"
        text += f"üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {combined['confidence']:.0%}\n\n"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        text += f"üìã *–°–û–°–¢–ê–í–õ–Ø–Æ–©–ò–ï –ê–ù–ê–õ–ò–ó–ê:*\n\n"
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        tech = components['technical']
        if tech['available']:
            text += f"üìà *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ({tech['weight']:.0%}):*\n"
            text += f"üìä –°–∏–≥–Ω–∞–ª: {tech['signal']}\n"
            text += f"üìà –í–∫–ª–∞–¥: {tech['score']:+.2f}\n\n"
        else:
            text += f"üìà *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:* ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        news = components['news']
        if news['available']:
            text += f"üì∞ *–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π ({news['weight']:.0%}):*\n"
            text += f"üìä –°–∏–≥–Ω–∞–ª: {news['signal']}\n"
            text += f"üìà –í–∫–ª–∞–¥: {news['score']:+.2f}\n\n"
        else:
            text += f"üì∞ *–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π:* ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        
        # –í—Ä–µ–º—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
        text += f"üïê *–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:* {datetime.now().strftime('%H:%M:%S')}\n\n"
        
        text += f"*üí° –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        text += f"‚Ä¢ `/analysis {ticker}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        text += f"‚Ä¢ `/news {ticker}` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        text += f"‚Ä¢ `/price {ticker}` - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n\n"
        
        # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
        text += f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —É—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, " \
                f"–Ω–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –æ–±–¥—É–º–∞–Ω–Ω–æ."
        
        return text


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
_global_signal_generator = None


def get_signal_generator() -> SignalGenerator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    global _global_signal_generator
    if _global_signal_generator is None:
        _global_signal_generator = SignalGenerator()
    return _global_signal_generator


async def generate_trading_signal(ticker: str) -> Dict:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
    generator = get_signal_generator()
    return await generator.generate_combined_signal(ticker)


async def get_trading_signal_for_telegram(ticker: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Telegram."""
    generator = get_signal_generator()
    result = await generator.generate_combined_signal(ticker)
    return generator.format_for_telegram(result)


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è."""
    import asyncio
    import json
    
    async def test_signal_generation():
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SignalGenerator...")
        
        try:
            generator = SignalGenerator()
            
            print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SBER...")
            result = await generator.generate_combined_signal("SBER")
            
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(json.dumps(result, ensure_ascii=False, indent=2))
            
            print("\nüì± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram:")
            telegram_text = generator.format_for_telegram(result)
            print(telegram_text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Signal Generator...")
    asyncio.run(test_signal_generation())


if __name__ == "__main__":
    main()
