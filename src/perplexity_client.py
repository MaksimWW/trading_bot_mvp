
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Perplexity API
–ü–æ–∏—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Optional

import requests


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class PerplexityError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ Perplexity API"""
    pass


class PerplexityClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Perplexity API"""

    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            api_key: API –∫–ª—é—á Perplexity (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        import os

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.api_key = api_key or os.getenv("PERPLEXITY_API_KEY")

        if not self.api_key:
            raise ValueError("API –∫–ª—é—á Perplexity –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PERPLEXITY_API_KEY")

        self.base_url = "https://api.perplexity.ai"
        self.model = "sonar"
        self.timeout = 30
        self.max_retries = 3
        self.retry_delay = 1

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã
        self.supported_tickers = {
            'SBER': '–°–±–µ—Ä–±–∞–Ω–∫ –°–±–µ—Ä',
            'GAZP': '–ì–∞–∑–ø—Ä–æ–º',
            'YNDX': '–Ø–Ω–¥–µ–∫—Å Yandex',
            'LKOH': '–õ—É–∫–æ–π–ª',
            'NVTK': '–ù–æ–≤–∞—Ç—ç–∫',
            'ROSN': '–†–æ—Å–Ω–µ—Ñ—Ç—å',
            'MGNT': '–ú–∞–≥–Ω–∏—Ç',
            'MTSS': '–ú–¢–°',
            'AFLT': '–ê—ç—Ä–æ—Ñ–ª–æ—Ç'
        }

        logger.info("PerplexityClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def search_ticker_news(self, ticker: str, hours: int = 24) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–∏–∫–µ—Ä—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤

        Args:
            ticker: –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER, GAZP, YNDX)
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            {
                "title": str,
                "content": str,
                "source": str,
                "url": str,
                "timestamp": str,
                "type": str
            }
        """
        if not ticker:
            raise ValueError("–¢–∏–∫–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        ticker_upper = ticker.upper()
        if ticker_upper not in self.supported_tickers:
            logger.warning(f"–¢–∏–∫–µ—Ä {ticker_upper} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö")

        logger.info(f"–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker_upper} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")

        query = self._build_search_query(ticker_upper, hours)

        for attempt in range(self.max_retries):
            try:
                response = self._make_request(query)
                news_data = self._parse_response(response, ticker_upper)

                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {ticker_upper}")
                return news_data

            except PerplexityError as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                else:
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {ticker_upper}")
                    raise

        return []

    def _build_search_query(self, ticker: str, hours: int) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        Args:
            ticker: –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤

        Returns:
            –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        """
        company = self.supported_tickers.get(ticker, ticker)

        query = f"""
        –ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ {hours} —á–∞—Å–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏ {company} ({ticker}).
        –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç: —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π, –≤–∞–∂–Ω—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è,
        —Å–ª–∏—è–Ω–∏—è –∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è, —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.
        –§–æ–∫—É—Å –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ, –Ω–æ –≤–∫–ª—é—á–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é.
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏.
        """

        logger.debug(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è {ticker}: {query[:100]}...")
        return query

    def _prepare_headers(self) -> Dict[str, str]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

    def _prepare_payload(self, query: str) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return {
            "model": self.model,
            "messages": [
                {
                    "role": "user",
                    "content": query
                }
            ],
            "return_citations": True,
            "temperature": 0.1,
            "max_tokens": 2000
        }

    def _handle_response_errors(self, response) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–≤–µ—Ç–∞ API"""
        if response.status_code == 401:
            raise PerplexityError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Perplexity (401)")
        elif response.status_code == 429:
            raise PerplexityError("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Perplexity API (429)")
        elif response.status_code >= 400:
            error_msg = f"–û—à–∏–±–∫–∞ API {response.status_code}"
            try:
                error_detail = response.json().get("error", {}).get("message", response.text)
                error_msg += f": {error_detail}"
            except Exception:
                error_msg += f": {response.text}"
            raise PerplexityError(error_msg)

    def _make_request(self, query: str) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity API

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

        Returns:
            –û—Ç–≤–µ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è

        Raises:
            PerplexityError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
        """
        headers = self._prepare_headers()
        payload = self._prepare_payload(query)

        try:
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {self.base_url}/chat/completions")

            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=self.timeout
            )

            self._handle_response_errors(response)
            response.raise_for_status()
            return response.json()

        except requests.exceptions.Timeout:
            raise PerplexityError(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ({self.timeout}s)")
        except requests.exceptions.ConnectionError:
            raise PerplexityError("üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Perplexity API")
        except requests.exceptions.RequestException as e:
            raise PerplexityError(f"üì° –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        except json.JSONDecodeError:
            raise PerplexityError("üìÑ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç API")

    def _parse_response(self, response: Dict, ticker: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Perplexity API –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç API
            ticker: –¢–∏–∫–µ—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            choices = response.get("choices", [])
            if not choices:
                logger.warning("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ choices –≤ –æ—Ç–≤–µ—Ç–µ")
                return []

            message = choices[0].get("message", {})
            content = message.get("content", "")
            citations = response.get("citations", [])

            if not content:
                logger.warning("–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ Perplexity")
                return []

            news_items = []
            current_time = datetime.now().isoformat()

            # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            main_news = {
                "title": f"–û–±–∑–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π {ticker} –æ—Ç Perplexity",
                "content": content,
                "source": "Perplexity AI",
                "url": "",
                "timestamp": current_time,
                "type": "aggregated"
            }
            news_items.append(main_news)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ citations
            for i, citation in enumerate(citations[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                if isinstance(citation, str) and citation.startswith("http"):
                    citation_news = {
                        "title": f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}: {self._extract_domain(citation)}",
                        "content": f"–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ {ticker}",
                        "source": self._extract_domain(citation),
                        "url": citation,
                        "timestamp": current_time,
                        "type": "citation"
                    }
                    news_items.append(citation_news)

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è {ticker}")
            return news_items

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {ticker}: {e}")
            return []

    def _extract_domain(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL"""
        try:
            from urllib.parse import urlparse
            parsed = urlparse(url)
            return parsed.netloc or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        except Exception:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"

    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Perplexity API

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–µ, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Perplexity API...")

            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_news = self.search_ticker_news("SBER", hours=1)

            if test_news:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Perplexity API —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(test_news)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return True  # API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π

        except PerplexityError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Perplexity API: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False


def _check_api_key() -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞"""
    import os
    
    api_key = os.getenv("PERPLEXITY_API_KEY")
    if not api_key:
        print("‚ùå PERPLEXITY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ .env —Ñ–∞–π–ª:")
        print("   PERPLEXITY_API_KEY=your_api_key_here")
        return None
    return api_key

def _initialize_client(api_key: str) -> PerplexityClient:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")
    client = PerplexityClient(api_key)
    print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    if client.test_connection():
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return client
    else:
        print("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª!")
        return None

def _test_ticker_news(client: PerplexityClient, ticker: str) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
    print(f"\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {ticker}...")
    try:
        news = client.search_ticker_news(ticker, hours=24)

        if news:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {ticker}!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
            first_news = news[0]
            print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {first_news['title']}")
            print(f"   üè¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {first_news['source']}")
            print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {first_news['content'][:150]}...")
            print(f"   üîó URL: {first_news.get('url', '–ù–µ—Ç URL')}")
            print(f"   üìÖ –í—Ä–µ–º—è: {first_news['timestamp']}")
            print(f"   üè∑Ô∏è –¢–∏–ø: {first_news['type']}")

            if len(news) > 1:
                print(f"   üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(news)} (–æ—Å–Ω–æ–≤–Ω–æ–π + {len(news)-1} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
        else:
            print(f"‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except PerplexityError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")

def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    from dotenv import load_dotenv

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()

    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Perplexity API –∫–ª–∏–µ–Ω—Ç–∞...")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = _check_api_key()
    if not api_key:
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = _initialize_client(api_key)
        if not client:
            return

        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        test_tickers = ["SBER", "GAZP", "YNDX"]
        for ticker in test_tickers:
            _test_ticker_news(client, ticker)

        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 50)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


if __name__ == "__main__":
    main()
