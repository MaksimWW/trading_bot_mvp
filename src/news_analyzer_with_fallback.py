import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from rss_parser import RSSParser

logger = logging.getLogger(__name__)


class NewsAnalyzerWithFallback:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å RSS fallback"""

    def __init__(self):
        self.rss_parser = None
        self.cache = {}
        self.cache_ttl = 3600
        self.stats = {"rss_fallback_used": 0, "cache_used": 0, "last_fallback_time": None}

    async def _init_rss_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RSS –ø–∞—Ä—Å–µ—Ä–∞"""
        if not self.rss_parser:
            self.rss_parser = RSSParser()
            await self.rss_parser.__aenter__()

    async def _cleanup_rss_parser(self):
        """–û—á–∏—Å—Ç–∫–∞ RSS –ø–∞—Ä—Å–µ—Ä–∞"""
        if self.rss_parser:
            await self.rss_parser.__aexit__(None, None, None)
            self.rss_parser = None

    def _get_cache_key(self, ticker: str, hours_back: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞"""
        return f"news_{ticker}_{hours_back}_{int(time.time() // 1800)}"

    async def get_ticker_news_rss(self, ticker: str, hours_back: int = 24) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS"""
        try:
            logger.info(f"üì° Trying RSS fallback for {ticker}")

            await self._init_rss_parser()
            news_items = await self.rss_parser.get_ticker_news(ticker, hours_back)

            if news_items:
                news_data = [
                    {
                        "title": item.title,
                        "content": item.content,
                        "url": item.url,
                        "published": item.published.isoformat(),
                        "source": f"RSS_{item.source}",
                        "relevance_score": item.relevance_score,
                    }
                    for item in news_items
                ]

                self.stats["rss_fallback_used"] += 1
                self.stats["last_fallback_time"] = datetime.now().isoformat()

                logger.info(f"‚úÖ RSS success: {len(news_data)} articles found")
                return news_data
            else:
                logger.warning(f"‚ö†Ô∏è RSS returned empty results for {ticker}")
                return []

        except Exception as e:
            logger.error(f"‚ùå RSS error for {ticker}: {e}")
            return []
        finally:
            await self._cleanup_rss_parser()

    async def analyze_ticker_news(self, ticker: str, hours_back: int = 24) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–∏–∫–µ—Ä—É —Å RSS fallback"""
        start_time = time.time()

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS
            news_data = await self.get_ticker_news_rss(ticker, hours_back)

            if not news_data:
                return {
                    "ticker": ticker,
                    "sentiment_score": 0.0,
                    "sentiment_label": "NEUTRAL",
                    "news_count": 0,
                    "news_summary": "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    "data_source": "rss",
                    "analysis_time": time.time() - start_time,
                    "reliability": "LOW",
                    "error": "No news found",
                }

            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            positive_words = ["—Ä–æ—Å—Ç", "–ø—Ä–∏–±—ã–ª—å", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π", "—É—Å–ø–µ—Ö", "—Ä–∞–∑–≤–∏—Ç–∏–µ"]
            negative_words = ["–ø–∞–¥–µ–Ω–∏–µ", "—É–±—ã—Ç–æ–∫", "—Å–Ω–∏–∂–µ–Ω–∏–µ", "–∫—Ä–∏–∑–∏—Å", "–ø—Ä–æ–±–ª–µ–º—ã", "—Ä–∏—Å–∫"]

            sentiment_score = 0.0
            total_words = 0

            for news in news_data:
                text = f"{news['title']} {news['content']}".lower()

                pos_count = sum(1 for word in positive_words if word in text)
                neg_count = sum(1 for word in negative_words if word in text)

                sentiment_score += (pos_count - neg_count) * 0.1
                total_words += len(text.split())

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            if total_words > 0:
                sentiment_score = max(-1.0, min(1.0, sentiment_score))

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏
            if sentiment_score > 0.3:
                sentiment_label = "BUY"
            elif sentiment_score < -0.3:
                sentiment_label = "SELL"
            else:
                sentiment_label = "HOLD"

            analysis_time = time.time() - start_time

            result = {
                "ticker": ticker,
                "sentiment_score": sentiment_score,
                "sentiment_label": sentiment_label,
                "news_count": len(news_data),
                "news_summary": f"–ù–∞–π–¥–µ–Ω–æ {len(news_data)} –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS",
                "data_source": "rss",
                "analysis_time": analysis_time,
                "reliability": "MEDIUM" if len(news_data) > 2 else "LOW",
                "fallback_used": True,
            }

            logger.info(
                f"‚úÖ RSS Analysis complete for {ticker}: {sentiment_label} ({sentiment_score:.2f})"
            )
            return result

        except Exception as e:
            logger.error(f"‚ùå RSS Analysis failed for {ticker}: {e}")
            return {
                "ticker": ticker,
                "sentiment_score": 0.0,
                "sentiment_label": "ERROR",
                "news_count": 0,
                "news_summary": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "data_source": "error",
                "analysis_time": time.time() - start_time,
                "reliability": "NONE",
                "error": str(e),
            }

    def format_telegram_response(self, analysis_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è Telegram"""
        ticker = analysis_result["ticker"]
        sentiment = analysis_result["sentiment_label"]
        score = analysis_result["sentiment_score"]
        news_count = analysis_result["news_count"]
        reliability = analysis_result["reliability"]

        sentiment_emoji = {"BUY": "üìà", "SELL": "üìâ", "HOLD": "‚û°Ô∏è", "ERROR": "‚ùå"}.get(
            sentiment, "‚ùì"
        )

        reliability_emoji = {"MEDIUM": "üü°", "LOW": "üü†", "NONE": "‚ö´"}.get(reliability, "‚ùì")

        message = f"üì∞ –ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô: {ticker} (RSS)\n\n"
        message += f"{sentiment_emoji} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}\n"
        message += f"üìä –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {score:+.2f}\n"
        message += f"üìà –ù–æ–≤–æ—Å—Ç–µ–π: {news_count}\n"
        message += f"{reliability_emoji} –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {reliability}\n"
        message += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: RSS —Ä–µ–∑–µ—Ä–≤\n\n"
        message += f"üí¨ {analysis_result.get('news_summary', '–†–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n\n"
        message += "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π RSS –∏—Å—Ç–æ—á–Ω–∏–∫"

        return message


# –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def get_news_analyzer():
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    return NewsAnalyzerWithFallback()


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def main():
    analyzer = NewsAnalyzerWithFallback()
    result = await analyzer.analyze_ticker_news("SBER")
    print(analyzer.format_telegram_response(result))


if __name__ == "__main__":
    asyncio.run(main())
