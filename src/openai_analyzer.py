"""
OpenAI Analyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.
"""

import asyncio
import logging
from typing import Dict, List, Optional

try:
    import openai
    from openai import OpenAI
except ImportError:
    openai = None
    OpenAI = None

from config import OPENAI_API_KEY

logger = logging.getLogger(__name__)


class OpenAIAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT-4."""

    def __init__(self, api_key: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞."""
        if not openai or not OpenAI:
            raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openai –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install openai")

        self.api_key = api_key or OPENAI_API_KEY
        if not self.api_key:
            raise ValueError("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.client = OpenAI(api_key=self.api_key)
        self.model = "gpt-4"
        self.max_tokens = 500
        self.temperature = 0.3

        logger.info("OpenAI Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def analyze_sentiment(self, ticker: str, news_list: List[Dict]) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

        Args:
            ticker: –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏
            news_list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.client:
            logger.warning("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        if not news_list:
            logger.warning(f"–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {ticker}")
            return None

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            news_text = ""
            for i, news in enumerate(news_list[:3], 1):
                title = news.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                content = news.get("content", news.get("summary", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"))

                news_text += f"{i}. {title}\n"
                news_text += f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content[:200]}...\n\n"

            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ {ticker} –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –∞–∫—Ü–∏–π.

–ù–æ–≤–æ—Å—Ç–∏:
{news_text}

–í–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "sentiment_score": —á–∏—Å–ª–æ –æ—Ç -1.0 –¥–æ +1.0,
    "sentiment_label": "STRONG_BUY" | "BUY" | "HOLD" | "SELL" | "STRONG_SELL",
    "summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
}}
"""

            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model=self.model,
                messages=[
                    {"role": "system", "content": "–í—ã - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞."},
                    {"role": "user", "content": prompt},
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
            )

            content = response.choices[0].message.content.strip()

            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            import json
            import re

            try:
                result = json.loads(content)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
                json_match = re.search(r"\{.*\}", content, re.DOTALL)
                if json_match:
                    result = json.loads(json_match.group())
                else:
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω
                    logger.warning(f"OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –¥–ª—è {ticker}: {content[:100]}")
                    result = {
                        "sentiment_score": 0.0,
                        "sentiment_label": "HOLD",
                        "summary": "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
                    }

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            score = max(-1.0, min(1.0, float(result.get("sentiment_score", 0.0))))
            label = result.get("sentiment_label", "HOLD")
            summary = result.get("summary", "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            return {
                "sentiment_score": score,
                "sentiment_label": label,
                "summary": summary,
                "ticker": ticker,
                "analyzed_news_count": len(news_list),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ OpenAI –¥–ª—è {ticker}: {e}")
            return None


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI Analyzer...")
    try:
        OpenAIAnalyzer()
        print("‚úÖ OpenAI Analyzer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    main()
