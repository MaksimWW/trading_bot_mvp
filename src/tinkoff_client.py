
import tinkoff_invest as ti
from tinkoff_invest.sandbox.client import SandboxClient
from config import TINKOFF_TOKEN, TINKOFF_SANDBOX, TINKOFF_APP_NAME
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TinkoffClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tinkoff Invest API"""
    
    def __init__(self):
        self.token = TINKOFF_TOKEN
        self.is_sandbox = TINKOFF_SANDBOX
        self.client = None
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        try:
            if self.is_sandbox:
                self.client = SandboxClient(self.token, app_name=TINKOFF_APP_NAME)
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ Tinkoff —É—Å–ø–µ—à–Ω–æ")
            else:
                # –î–ª—è –±–æ–µ–≤–æ–≥–æ API (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
                logger.warning("–ë–æ–µ–≤–æ–π API –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                return False
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tinkoff API: {e}")
            return False
    
    def get_accounts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤"""
        try:
            if not self.client:
                logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return None
            
            accounts = self.client.users.get_accounts()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(accounts.accounts)}")
            return accounts.accounts
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤: {e}")
            return None
    
    def get_portfolio(self, account_id=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            if not account_id:
                accounts = self.get_accounts()
                if accounts:
                    account_id = accounts[0].id
                else:
                    return None
            
            portfolio = self.client.operations.get_portfolio(account_id=account_id)
            logger.info(f"–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Å—á–µ—Ç–∞: {account_id}")
            return portfolio
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return None
    
    def search_instrument(self, ticker):
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–∫–µ—Ä—É"""
        try:
            response = self.client.instruments.find_instrument(query=ticker)
            if response.instruments:
                logger.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {ticker}")
                return response.instruments[0]
            else:
                logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {ticker}: {e}")
            return None
    
    def get_last_price(self, figi):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ FIGI"""
        try:
            response = self.client.market_data.get_last_prices(figi=[figi])
            if response.last_prices:
                price = response.last_prices[0]
                logger.info(f"–¶–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è FIGI {figi}")
                return price
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è FIGI {figi}: {e}")
            return None

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def test_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tinkoff API...")
    
    client = TinkoffClient()
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
    print("\nüìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤")
    accounts = client.get_accounts()
    if accounts:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {len(accounts)}")
        for acc in accounts:
            print(f"  - ID —Å—á–µ—Ç–∞: {acc.id}")
            print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {acc.name}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ SBER
    print("\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∞–∫—Ü–∏–∏ SBER")
    sber = client.search_instrument("SBER")
    if sber:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ü–∏—è:")
        print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {sber.name}")
        print(f"  - FIGI: {sber.figi}")
        print(f"  - –¢–∏–∫–µ—Ä: {sber.ticker}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        print("\nüí∞ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã SBER")
        price = client.get_last_price(sber.figi)
        if price:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É (–≤ –∫–æ–ø–µ–π–∫–∞—Ö) –≤ —Ä—É–±–ª–∏
            price_rub = price.price.units + price.price.nano / 1_000_000_000
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –¶–µ–Ω–∞ SBER: {price_rub:.2f} ‚ÇΩ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SBER")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_connection()
