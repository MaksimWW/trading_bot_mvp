"""
Strategy State Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞.
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List

logger = logging.getLogger(__name__)


class StrategyStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è persistence –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏."""

    def __init__(self, state_file: str = "strategy_state.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

        Args:
            state_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        self.state_file = Path(state_file)
        self.state = self._load_state()
        logger.info("Strategy State Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _load_state(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if self.state_file.exists():
                with open(self.state_file, "r", encoding="utf-8") as f:
                    state = json.load(f)
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {self.state_file}")
                return state
            else:
                logger.info("strategy_state.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                return self._create_empty_state()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return self._create_empty_state()

    def _create_empty_state(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        return {"strategies": {}, "last_updated": datetime.now().isoformat(), "version": "1.0"}

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª."""
        try:
            self.state["last_updated"] = datetime.now().isoformat()
            with open(self.state_file, "w", encoding="utf-8") as f:
                json.dump(self.state, f, ensure_ascii=False, indent=2)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")

    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        if strategy_id not in self.state["strategies"]:
            self.state["strategies"][strategy_id] = {
                "active_tickers": [],
                "started_at": datetime.now().isoformat(),
                "status": "active",
            }

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã
        current_tickers = set(self.state["strategies"][strategy_id]["active_tickers"])
        current_tickers.update(tickers)
        self.state["strategies"][strategy_id]["active_tickers"] = list(current_tickers)
        self.state["strategies"][strategy_id]["last_updated"] = datetime.now().isoformat()

        self._save_state()
        logger.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {tickers}")

    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (None = –≤—Å–µ)
        """
        if strategy_id not in self.state["strategies"]:
            logger.warning(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if tickers is None:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
            self.state["strategies"][strategy_id]["active_tickers"] = []
            self.state["strategies"][strategy_id]["status"] = "stopped"
        else:
            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            current_tickers = set(self.state["strategies"][strategy_id]["active_tickers"])
            current_tickers.difference_update(tickers)
            self.state["strategies"][strategy_id]["active_tickers"] = list(current_tickers)

        self.state["strategies"][strategy_id]["last_updated"] = datetime.now().isoformat()
        self._save_state()
        logger.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {tickers or '–≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤'}")

    def get_active_tickers(self, strategy_id: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        """
        if strategy_id not in self.state["strategies"]:
            return []

        return self.state["strategies"][strategy_id].get("active_tickers", [])

    def get_all_active_strategies(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å {strategy_id: [tickers]}
        """
        active_strategies = {}

        for strategy_id, strategy_data in self.state["strategies"].items():
            if strategy_data.get("status") != "stopped":
                active_tickers = strategy_data.get("active_tickers", [])
                if active_tickers:
                    active_strategies[strategy_id] = active_tickers

        return active_strategies

    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        """
        if strategy_id not in self.state["strategies"]:
            return False

        strategy_data = self.state["strategies"][strategy_id]
        if strategy_data.get("status") == "stopped":
            return False

        active_tickers = strategy_data.get("active_tickers", [])

        if ticker is None:
            return len(active_tickers) > 0
        else:
            return ticker in active_tickers

    def get_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        total_strategies = len(self.state["strategies"])
        active_strategies = len(
            [
                s
                for s in self.state["strategies"].values()
                if s.get("status") != "stopped" and s.get("active_tickers")
            ]
        )

        all_tickers = set()
        for strategy_data in self.state["strategies"].values():
            if strategy_data.get("status") != "stopped":
                all_tickers.update(strategy_data.get("active_tickers", []))

        return {
            "total_strategies": total_strategies,
            "active_strategies": active_strategies,
            "unique_tickers": len(all_tickers),
            "last_updated": self.state.get("last_updated"),
            "strategies": {
                strategy_id: {
                    "tickers_count": len(data.get("active_tickers", [])),
                    "status": data.get("status", "unknown"),
                    "tickers": data.get("active_tickers", []),
                }
                for strategy_id, data in self.state["strategies"].items()
            },
        }

    def clear_all_strategies(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
        self.state["strategies"] = {}
        self._save_state()
        logger.info("–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—á–∏—â–µ–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_global_state_manager = None


def get_strategy_state_manager() -> StrategyStateManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä State Manager."""
    global _global_state_manager
    if _global_state_manager is None:
        _global_state_manager = StrategyStateManager()
    return _global_state_manager


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Strategy State Manager...")

    try:
        manager = get_strategy_state_manager()
        print(f"‚úÖ State Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = manager.get_state_summary()
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   - –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {summary['total_strategies']}")
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_strategies']}")
        print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {summary['unique_tickers']}")

        if summary["strategies"]:
            print(f"üìã –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
            for strategy_id, data in summary["strategies"].items():
                print(f"   - {strategy_id}: {data['tickers_count']} —Ç–∏–∫–µ—Ä–æ–≤ ({data['status']})")
                if data["tickers"]:
                    print(f"     –¢–∏–∫–µ—Ä—ã: {', '.join(data['tickers'])}")

        print("üéØ Strategy State Manager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()

"""Portfolio Coordinator - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""

import asyncio
import logging
from typing import Dict, List

from src.strategy_state_manager import get_strategy_state_manager

logger = logging.getLogger(__name__)


class PortfolioCoordinator:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        self.strategy_state_manager = get_strategy_state_manager()
        self.is_running = False
        logger.info("Portfolio Coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if self.is_running:
            logger.info("Portfolio Coordinator —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
            return

        self.is_running = True
        logger.info("Portfolio Coordinator –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if not self.is_running:
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        self.is_running = False
        logger.info("Portfolio Coordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        self.strategy_state_manager.start_strategy(strategy_id, tickers)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")

    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–µ—Å–ª–∏ None - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ)
        """
        self.strategy_state_manager.stop_strategy(strategy_id, tickers)
        if tickers:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")
        else:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤")

    def get_active_strategies(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - strategy_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        return self.strategy_state_manager.get_all_active_strategies()

    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –¢–∏–∫–µ—Ä (–µ—Å–ª–∏ None - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)

        Returns:
            True, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ (–∏–ª–∏ –≤ –æ–±—â–µ–º, –µ—Å–ª–∏ ticker=None)
        """
        return self.strategy_state_manager.is_strategy_active(strategy_id, ticker)

    def get_strategy_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        return self.strategy_state_manager.get_state_summary()


# Singleton instance
_portfolio_coordinator = None


def get_portfolio_coordinator() -> PortfolioCoordinator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Portfolio Coordinator (Singleton)."""
    global _portfolio_coordinator
    if _portfolio_coordinator is None:
        _portfolio_coordinator = PortfolioCoordinator()
    return _portfolio_coordinator


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Portfolio Coordinator."""
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    coordinator = get_portfolio_coordinator()
    await coordinator.start()

    # –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    coordinator.start_strategy("strategy_1", ["AAPL", "MSFT"])
    coordinator.start_strategy("strategy_2", ["GOOGL"])

    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", coordinator.get_active_strategies())

    await asyncio.sleep(5)  # –ü–∞—É–∑–∞

    coordinator.stop_strategy("strategy_1", ["AAPL"])
    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", coordinator.get_active_strategies())

    await coordinator.stop()


if __name__ == "__main__":
    asyncio.run(main())

"""Portfolio Coordinator - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""

import asyncio
import logging
from typing import Dict, List

from src.strategy_state_manager import get_strategy_state_manager

logger = logging.getLogger(__name__)


class PortfolioCoordinator:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        self.strategy_state_manager = get_strategy_state_manager()
        self.is_running = False
        logger.info("Portfolio Coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if self.is_running:
            logger.info("Portfolio Coordinator —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
            return

        self.is_running = True
        logger.info("Portfolio Coordinator –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if not self.is_running:
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        self.is_running = False
        logger.info("Portfolio Coordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        self.strategy_state_manager.start_strategy(strategy_id, tickers)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")

    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–µ—Å–ª–∏ None - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ)
        """
        self.strategy_state_manager.stop_strategy(strategy_id, tickers)
        if tickers:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")
        else:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤")

    def get_active_strategies(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - strategy_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        return self.strategy_state_manager.get_all_active_strategies()

    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –¢–∏–∫–µ—Ä (–µ—Å–ª–∏ None - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)

        Returns:
            True, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ (–∏–ª–∏ –≤ –æ–±—â–µ–º, –µ—Å–ª–∏ ticker=None)
        """
        return self.strategy_state_manager.is_strategy_active(strategy_id, ticker)

    def get_strategy_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        return self.strategy_state_manager.get_state_summary()


# Singleton instance
_portfolio_coordinator = None


def get_portfolio_coordinator() -> PortfolioCoordinator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Portfolio Coordinator (Singleton)."""
    global _portfolio_coordinator
    if _portfolio_coordinator is None:
        _portfolio_coordinator = PortfolioCoordinator()
    return _portfolio_coordinator


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Portfolio Coordinator."""
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    coordinator = get_portfolio_coordinator()
    await coordinator.start()

    # –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    coordinator.start_strategy("strategy_1", ["AAPL", "MSFT"])
    coordinator.start_strategy("strategy_2", ["GOOGL"])

    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", coordinator.get_active_strategies())

    await asyncio.sleep(5)  # –ü–∞—É–∑–∞

    coordinator.stop_strategy("strategy_1", ["AAPL"])
    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", coordinator.get_active_strategies())

    await coordinator.stop()


if __name__ == "__main__":
    asyncio.run(main())

"""Portfolio Coordinator - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""

import asyncio
import logging
from typing import Dict, List

from src.strategy_state_manager import get_strategy_state_manager

logger = logging.getLogger(__name__)


class PortfolioCoordinator:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        self.strategy_state_manager = get_strategy_state_manager()
        self.is_running = False
        logger.info("Portfolio Coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if self.is_running:
            logger.info("Portfolio Coordinator —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
            return

        self.is_running = True
        logger.info("Portfolio Coordinator –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if not self.is_running:
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        self.is_running = False
        logger.info("Portfolio Coordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        self.strategy_state_manager.start_strategy(strategy_id, tickers)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")

    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–µ—Å–ª–∏ None - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ)
        """
        self.strategy_state_manager.stop_strategy(strategy_id, tickers)
        if tickers:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")
        else:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤")

    def get_active_strategies(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - strategy_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        return self.strategy_state_manager.get_all_active_strategies()

    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –¢–∏–∫–µ—Ä (–µ—Å–ª–∏ None - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)

        Returns:
            True, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ (–∏–ª–∏ –≤ –æ–±—â–µ–º, –µ—Å–ª–∏ ticker=None)
        """
        return self.strategy_state_manager.is_strategy_active(strategy_id, ticker)

    def get_strategy_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        return self.strategy_state_manager.get_state_summary()


# Singleton instance
_portfolio_coordinator = None


def get_portfolio_coordinator() -> PortfolioCoordinator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Portfolio Coordinator (Singleton)."""
    global _portfolio_coordinator
    if _portfolio_coordinator is None:
        _portfolio_coordinator = PortfolioCoordinator()
    return _portfolio_coordinator


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Portfolio Coordinator."""
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    coordinator = get_portfolio_coordinator()
    await coordinator.start()

    # –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    coordinator.start_strategy("strategy_1", ["AAPL", "MSFT"])
    coordinator.start_strategy("strategy_2", ["GOOGL"])

    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", coordinator.get_active_strategies())

    await asyncio.sleep(5)  # –ü–∞—É–∑–∞

    coordinator.stop_strategy("strategy_1", ["AAPL"])
    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", coordinator.get_active_strategies())

    await coordinator.stop()


if __name__ == "__main__":
    asyncio.run(main())

"""Portfolio Coordinator - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""

import asyncio
import logging
from typing import Dict, List

from src.strategy_state_manager import get_strategy_state_manager

logger = logging.getLogger(__name__)


class PortfolioCoordinator:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        self.strategy_state_manager = get_strategy_state_manager()
        self.is_running = False
        logger.info("Portfolio Coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if self.is_running:
            logger.info("Portfolio Coordinator —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
            return

        self.is_running = True
        logger.info("Portfolio Coordinator –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if not self.is_running:
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        self.is_running = False
        logger.info("Portfolio Coordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        self.strategy_state_manager.start_strategy(strategy_id, tickers)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")

    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–µ—Å–ª–∏ None - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ)
        """
        self.strategy_state_manager.stop_strategy(strategy_id, tickers)
        if tickers:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")
        else:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤")

    def get_active_strategies(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - strategy_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        return self.strategy_state_manager.get_all_active_strategies()

    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –¢–∏–∫–µ—Ä (–µ—Å–ª–∏ None - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)

        Returns:
            True, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ (–∏–ª–∏ –≤ –æ–±—â–µ–º, –µ—Å–ª–∏ ticker=None)
        """
        return self.strategy_state_manager.is_strategy_active(strategy_id, ticker)

    def get_strategy_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        return self.strategy_state_manager.get_state_summary()


# Singleton instance
_portfolio_coordinator = None


def get_portfolio_coordinator() -> PortfolioCoordinator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Portfolio Coordinator (Singleton)."""
    global _portfolio_coordinator
    if _portfolio_coordinator is None:
        _portfolio_coordinator = PortfolioCoordinator()
    return _portfolio_coordinator


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Portfolio Coordinator."""
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    coordinator = get_portfolio_coordinator()
    await coordinator.start()

    # –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    coordinator.start_strategy("strategy_1", ["AAPL", "MSFT"])
    coordinator.start_strategy("strategy_2", ["GOOGL"])

    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", coordinator.get_active_strategies())

    await asyncio.sleep(5)  # –ü–∞—É–∑–∞

    coordinator.stop_strategy("strategy_1", ["AAPL"])
    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", coordinator.get_active_strategies())

    await coordinator.stop()


if __name__ == "__main__":
    asyncio.run(main())

"""Portfolio Coordinator - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""

import asyncio
import logging
from typing import Dict, List

from src.strategy_state_manager import get_strategy_state_manager

logger = logging.getLogger(__name__)


class PortfolioCoordinator:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        self.strategy_state_manager = get_strategy_state_manager()
        self.is_running = False
        logger.info("Portfolio Coordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if self.is_running:
            logger.info("Portfolio Coordinator —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
            return

        self.is_running = True
        logger.info("Portfolio Coordinator –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        if not self.is_running:
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        self.is_running = False
        logger.info("Portfolio Coordinator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        self.strategy_state_manager.start_strategy(strategy_id, tickers)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")

    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ (–µ—Å–ª–∏ None - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ)
        """
        self.strategy_state_manager.stop_strategy(strategy_id, tickers)
        if tickers:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {tickers}")
        else:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤")

    def get_active_strategies(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ç–∏–∫–µ—Ä—ã.

        Returns:
            –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - strategy_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        return self.strategy_state_manager.get_all_active_strategies()

    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.

        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            ticker: –¢–∏–∫–µ—Ä (–µ—Å–ª–∏ None - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)

        Returns:
            True, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ (–∏–ª–∏ –≤ –æ–±—â–µ–º, –µ—Å–ª–∏ ticker=None)
        """
        return self.strategy_state_manager.is_strategy_active(strategy_id, ticker)

    def get_strategy_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        return self.strategy_state_manager.get_state_summary()


# Singleton instance
_portfolio_coordinator = None


def get_portfolio_coordinator() -> PortfolioCoordinator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Portfolio Coordinator (Singleton)."""
    global _portfolio_coordinator
    if _portfolio_coordinator is None:
        _portfolio_coordinator = PortfolioCoordinator()
    return _portfolio_coordinator


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Portfolio Coordinator."""
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    coordinator = get_portfolio_coordinator()
    await coordinator.start()

    # –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    coordinator.start_strategy("strategy_1", ["AAPL", "MSFT"])
    coordinator.start_strategy("strategy_2", ["GOOGL"])

    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", coordinator.get_active_strategies())

    await asyncio.sleep(5)  # –ü–∞—É–∑–∞

    coordinator.stop_strategy("strategy_1", ["AAPL"])
    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", coordinator.get_active_strategies())

    await coordinator.stop()


if __name__ == "__main__":
    asyncio.run(main())