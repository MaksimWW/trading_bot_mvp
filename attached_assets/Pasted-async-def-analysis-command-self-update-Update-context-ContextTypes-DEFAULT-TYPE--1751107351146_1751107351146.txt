async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /analysis TICKER - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–∏**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/analysis TICKER`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/analysis SBER` - –∞–Ω–∞–ª–∏–∑ –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                    "‚Ä¢ `/analysis GAZP` - –∞–Ω–∞–ª–∏–∑ –ì–∞–∑–ø—Ä–æ–º–∞\n"
                    "‚Ä¢ `/analysis YNDX` - –∞–Ω–∞–ª–∏–∑ –Ø–Ω–¥–µ–∫—Å–∞\n\n"
                    "üìà –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: RSI, MACD, Bollinger Bands, —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
                    parse_mode="Markdown"
                )
                return

            ticker = context.args[0].upper()
            loading_msg = await update.message.reply_text(
                f"üìä –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {ticker}...",
                parse_mode="Markdown"
            )

            try:
                from technical_analysis import get_ticker_analysis_for_telegram
                result_text = await get_ticker_analysis_for_telegram(ticker)
                
                await loading_msg.edit_text(result_text, parse_mode="Markdown")
                logger.info(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {ticker} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
            except Exception as e:
                await loading_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {ticker}: {str(e)[:100]}...\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏\n"
                    "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º",
                    parse_mode="Markdown"
                )
                logger.error(f"–û—à–∏–±–∫–∞ analysis_command –¥–ª—è {ticker}: {e}")
                
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ analysis_command: {e}")

    async def signal_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /signal TICKER - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üéØ **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/signal TICKER`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/signal SBER` - —Å–∏–≥–Ω–∞–ª –ø–æ –°–±–µ—Ä–±–∞–Ω–∫—É\n"
                    "‚Ä¢ `/signal GAZP` - —Å–∏–≥–Ω–∞–ª –ø–æ –ì–∞–∑–ø—Ä–æ–º—É\n"
                    "‚Ä¢ `/signal YNDX` - —Å–∏–≥–Ω–∞–ª –ø–æ –Ø–Ω–¥–µ–∫—Å—É\n\n"
                    "üß† –û–±—ä–µ–¥–∏–Ω—è–µ—Ç: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (60%) + –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (40%)",
                    parse_mode="Markdown"
                )
                return

            ticker = context.args[0].upper()
            loading_msg = await update.message.reply_text(
                f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker}...\n"
                f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–æ–≤–æ—Å—Ç–∏...",
                parse_mode="Markdown"
            )

            try:
                from ai_signal_integration import AISignalIntegration
                ai_signal = AISignalIntegration()
                signal_result = await ai_signal.generate_comprehensive_signal(ticker)
                
                if signal_result and signal_result.get("success"):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram
                    result_text = f"üéØ **–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ {ticker}**\n\n"
                    
                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    signal_strength = signal_result.get("signal_strength", "HOLD")
                    combined_score = signal_result.get("combined_score", 0)
                    confidence = signal_result.get("confidence", 0)
                    
                    signal_emoji = {"STRONG_BUY": "üíö", "BUY": "üü¢", "HOLD": "üü°", "SELL": "üü†", "STRONG_SELL": "üî¥"}.get(signal_strength, "‚ö™")
                    
                    result_text += f"{signal_emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {signal_strength}**\n"
                    result_text += f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {combined_score:+.2f}\n"
                    result_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%}\n\n"
                    
                    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    technical_score = signal_result.get("technical_score", 0)
                    news_score = signal_result.get("news_score", 0)
                    
                    result_text += f"üìä **–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (60% –≤–µ—Å–∞):**\n"
                    result_text += f"üìà –û—Ü–µ–Ω–∫–∞: {technical_score:+.2f}\n\n"
                    
                    result_text += f"üì∞ **–ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ï–ô (40% –≤–µ—Å–∞):**\n"
                    result_text += f"ü§ñ –û—Ü–µ–Ω–∫–∞: {news_score:+.2f}\n\n"
                    
                    result_text += f"‚öñÔ∏è –§–æ—Ä–º—É–ª–∞: ({technical_score:+.2f} √ó 0.6) + ({news_score:+.2f} √ó 0.4) = {combined_score:+.2f}\n\n"
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    result_text += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                    if abs(combined_score) > 0.4:
                        result_text += f"‚Ä¢ –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª - –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n"
                    else:
                        result_text += f"‚Ä¢ –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∂–∏–¥–∞—Ç—å\n"
                        
                    result_text += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: –Ω–µ –±–æ–ª–µ–µ 5% –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
                    result_text += f"‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: 7%\n\n"
                    
                    result_text += f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    result_text += f"üí° **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
                    result_text += f"‚Ä¢ `/analysis {ticker}` - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
                    result_text += f"‚Ä¢ `/news {ticker}` - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                    result_text += f"‚Ä¢ `/risk {ticker}` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–∫–∏\n\n"
                    result_text += "‚ö†Ô∏è *–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π*"
                    
                    await loading_msg.edit_text(result_text, parse_mode="Markdown")
                    logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª {ticker} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {signal_strength} ({combined_score:+.2f})")
                else:
                    await loading_msg.edit_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker}.\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ:\n"
                        f"‚Ä¢ `/analysis {ticker}` - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
                        f"‚Ä¢ `/news {ticker}` - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
                        parse_mode="Markdown"
                    )
                
            except Exception as e:
                await loading_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {ticker}: {str(e)[:100]}...\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏\n"
                    "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ /analysis –∏ /news",
                    parse_mode="Markdown"
                )
                logger.error(f"–û—à–∏–±–∫–∞ signal_command –¥–ª—è {ticker}: {e}")
                
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ signal_command: {e}")