async def strategies_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategies."""
        loading_msg = await update.message.reply_text(
            "üìä –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            from strategy_engine import get_strategy_engine
            engine = get_strategy_engine()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            all_strategies = engine.get_all_strategies()
            active_strategies = engine.get_active_strategies()
            
            strategies_text = "*üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–û–†–ì–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"
            
            for strategy_id, info in all_strategies.items():
                status_emoji = {
                    "inactive": "‚ö´",
                    "active": "üü¢", 
                    "paused": "üü°",
                    "error": "üî¥",
                    "stopped": "‚ö™"
                }.get(info["status"], "‚ùì")
                
                strategies_text += f"*{info['name']}*\n"
                strategies_text += f"{status_emoji} –°—Ç–∞—Ç—É—Å: {info['status'].upper()}\n"
                strategies_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
                strategies_text += f"üìà –¢–∏–∫–µ—Ä—ã: {', '.join(info['supported_tickers'])}\n"
                strategies_text += f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {info['signals_generated']}\n\n"
            
            strategies_text += "*üí° –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:*\n"
            strategies_text += "‚Ä¢ `/start_strategy rsi_mean_reversion SBER` - –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            strategies_text += "‚Ä¢ `/stop_strategy rsi_mean_reversion` - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            strategies_text += "‚Ä¢ `/strategy_status` - —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            strategies_text += "‚Ä¢ `/strategy_signals SBER` - —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–∏–∫–µ—Ä–∞\n\n"
            
            if active_strategies:
                strategies_text += f"*üöÄ –ê–ö–¢–ò–í–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô: {len(active_strategies)}*"
            else:
                strategies_text += "*üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π*"
            
            await loading_msg.edit_text(
                strategies_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategies command error: {e}")

    async def start_strategy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_strategy."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "*üöÄ –ó–ê–ü–£–°–ö –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/start_strategy STRATEGY_ID TICKER`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/start_strategy rsi_mean_reversion SBER`\n"
                "‚Ä¢ `/start_strategy macd_trend_following GAZP`\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n"
                "‚Ä¢ `rsi_mean_reversion` - RSI Mean Reversion\n"
                "‚Ä¢ `macd_trend_following` - MACD Trend Following\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategies` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        strategy_id = context.args[0]
        ticker = context.args[1].upper()
        
        loading_msg = await update.message.reply_text(
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é *{strategy_id}* –¥–ª—è *{ticker}*...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            from strategy_engine import get_strategy_engine
            engine = get_strategy_engine()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            success = engine.start_strategy(strategy_id, [ticker])
            
            if success:
                result_text = f"‚úÖ *–°–¢–†–ê–¢–ï–ì–ò–Ø –ó–ê–ü–£–©–ï–ù–ê*\n\n"
                result_text += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: *{strategy_id}*\n"
                result_text += f"üìà –¢–∏–∫–µ—Ä: *{ticker}*\n"
                result_text += f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n\n"
                result_text += f"üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {ticker}\n"
                result_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategy_signals {ticker}` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"
            else:
                result_text = f"‚ùå *–û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê*\n\n"
                result_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é *{strategy_id}*\n\n"
                result_text += f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                result_text += f"‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                result_text += f"‚Ä¢ –¢–∏–∫–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
                result_text += f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞"
            
            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Start strategy error: {e}")

    async def stop_strategy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_strategy."""
        if not context.args:
            await update.message.reply_text(
                "*üõë –û–°–¢–ê–ù–û–í–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/stop_strategy STRATEGY_ID`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/stop_strategy rsi_mean_reversion`\n"
                "‚Ä¢ `/stop_strategy macd_trend_following`\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategy_status` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        strategy_id = context.args[0]
        
        try:
            from strategy_engine import get_strategy_engine
            engine = get_strategy_engine()
            
            success = engine.stop_strategy(strategy_id)
            
            if success:
                result_text = f"‚úÖ *–°–¢–†–ê–¢–ï–ì–ò–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê*\n\n"
                result_text += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: *{strategy_id}*\n"
                result_text += f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%H:%M:%S')}"
            else:
                result_text = f"‚ö†Ô∏è *–°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï –ê–ö–¢–ò–í–ù–ê*\n\n"
                result_text += f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è *{strategy_id}* –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞"
            
            await update.message.reply_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Stop strategy error: {e}")

    async def strategy_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategy_status."""
        try:
            from strategy_engine import get_strategy_engine
            engine = get_strategy_engine()
            
            active_strategies = engine.get_active_strategies()
            
            if not active_strategies:
                status_text = "*üìä –°–¢–ê–¢–£–° –°–¢–†–ê–¢–ï–ì–ò–ô*\n\n"
                status_text += "üí§ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π*\n\n"
                status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/strategies` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            else:
                status_text = f"*üìä –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò ({len(active_strategies)})*\n\n"
                
                for strategy_id, info in active_strategies.items():
                    status_text += f"üü¢ *{info['name']}*\n"
                    status_text += f"üÜî ID: `{strategy_id}`\n"
                    status_text += f"üìà –¢–∏–∫–µ—Ä—ã: {', '.join(info['supported_tickers'])}\n"
                    status_text += f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {info['signals_generated']}\n"
                    
                    if info['last_execution']:
                        last_exec = datetime.fromisoformat(info['last_execution'])
                        status_text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {last_exec.strftime('%H:%M:%S')}\n"
                    
                    status_text += "\n"
                
                status_text += "*üí° –ö–æ–º–∞–Ω–¥—ã:*\n"
                status_text += "‚Ä¢ `/stop_strategy STRATEGY_ID` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
                status_text += "‚Ä¢ `/strategy_signals TICKER` - –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"
            
            await update.message.reply_text(
                status_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategy status error: {e}")

    async def strategy_signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /strategy_signals."""
        if not context.args:
            await update.message.reply_text(
                "*üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/strategy_signals TICKER`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/strategy_signals SBER`\n"
                "‚Ä¢ `/strategy_signals GAZP`\n\n"
                "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        ticker = context.args[0].upper()
        
        loading_msg = await update.message.reply_text(
            f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è *{ticker}*...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            from strategy_engine import get_strategy_engine
            engine = get_strategy_engine()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            result = await engine.execute_strategy_signals(ticker)
            
            if result['signals_count'] == 0:
                signals_text = f"*üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´ {ticker}*\n\n"
                signals_text += "üí§ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π*\n\n"
                signals_text += result['message']
            else:
                signals_text = f"*üéØ –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´ {ticker}*\n\n"
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                rec_emoji = {"BUY": "üü¢", "SELL": "üî¥", "HOLD": "üü°"}.get(result['recommendation'], "‚ö™")
                signals_text += f"{rec_emoji} *–ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {result['recommendation']}*\n"
                signals_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}\n"
                signals_text += f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result['signals_count']}\n\n"
                
                # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
                if result['buy_signals'] > 0:
                    signals_text += f"üü¢ BUY —Å–∏–≥–Ω–∞–ª–æ–≤: {result['buy_signals']}\n"
                if result['sell_signals'] > 0:
                    signals_text += f"üî¥ SELL —Å–∏–≥–Ω–∞–ª–æ–≤: {result['sell_signals']}\n"
                
                signals_text += f"\n*üìã –î–ï–¢–ê–õ–ò –°–ò–ì–ù–ê–õ–û–í:*\n"
                for signal in result['signals']:
                    signal_emoji = {"BUY": "üü¢", "SELL": "üî¥", "HOLD": "üü°"}.get(signal['action'], "‚ö™")
                    signals_text += f"{signal_emoji} {signal['strategy_id']}: {signal['action']} ({signal['confidence']:.2f})\n"
                
                signals_text += f"\n‚è∞ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%H:%M:%S')}"
            
            await loading_msg.edit_text(
                signals_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Strategy signals error: {e}")