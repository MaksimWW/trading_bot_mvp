"""
Strategy Engine для автоматических торговых стратегий.

Этот модуль реализует базовую архитектуру для создания и выполнения
автоматических торговых стратегий с интеграцией в существующую систему.
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from abc import ABC, abstractmethod
from enum import Enum
import json

from config import STRATEGY_CONFIG
from portfolio_manager import PortfolioManager
from technical_analysis import TechnicalAnalysis
from news_analyzer import get_news_analyzer
from ai_signal_integration import AISignalIntegration


logger = logging.getLogger(__name__)


class StrategyStatus(Enum):
    """Статусы стратегий."""
    INACTIVE = "inactive"
    ACTIVE = "active"
    PAUSED = "paused"
    ERROR = "error"
    STOPPED = "stopped"


class StrategyEvent:
    """Базовый класс для событий стратегий."""
    
    def __init__(self, strategy_id: str, event_type: str, data: Dict[str, Any]):
        self.strategy_id = strategy_id
        self.event_type = event_type
        self.data = data
        self.timestamp = datetime.now()


class TradingSignal:
    """Торговый сигнал от стратегии."""
    
    def __init__(self, ticker: str, action: str, confidence: float, 
                 quantity: Optional[int] = None, price: Optional[float] = None):
        self.ticker = ticker
        self.action = action  # BUY, SELL, HOLD
        self.confidence = confidence  # 0.0 to 1.0
        self.quantity = quantity
        self.price = price
        self.timestamp = datetime.now()
        self.strategy_id = None
        
    def to_dict(self) -> Dict[str, Any]:
        """Конвертация в словарь для логирования."""
        return {
            "ticker": self.ticker,
            "action": self.action,
            "confidence": self.confidence,
            "quantity": self.quantity,
            "price": self.price,
            "timestamp": self.timestamp.isoformat(),
            "strategy_id": self.strategy_id
        }


class BaseStrategy(ABC):
    """Базовый класс для всех торговых стратегий."""
    
    def __init__(self, strategy_id: str, name: str, config: Dict[str, Any]):
        self.strategy_id = strategy_id
        self.name = name
        self.config = config
        self.status = StrategyStatus.INACTIVE
        self.created_at = datetime.now()
        self.last_execution = None
        self.signals_generated = 0
        self.performance_metrics = {}
        
        # Инициализация компонентов
        self.portfolio_manager = PortfolioManager()
        self.technical_analyzer = TechnicalAnalysis()
        self.news_analyzer = get_news_analyzer()
        self.ai_signal = AISignalIntegration()
        
        logger.info(f"Инициализирована стратегия {self.name} (ID: {self.strategy_id})")
    
    @abstractmethod
    async def generate_signal(self, ticker: str) -> Optional[TradingSignal]:
        """Генерация торгового сигнала для тикера."""
        pass
    
    @abstractmethod
    def get_description(self) -> str:
        """Описание стратегии."""
        pass
    
    def get_supported_tickers(self) -> List[str]:
        """Поддерживаемые тикеры."""
        return self.config.get("supported_tickers", ["SBER", "GAZP", "YNDX"])
    
    def start(self):
        """Запуск стратегии."""
        self.status = StrategyStatus.ACTIVE
        logger.info(f"Стратегия {self.name} запущена")
    
    def stop(self):
        """Остановка стратегии."""
        self.status = StrategyStatus.STOPPED
        logger.info(f"Стратегия {self.name} остановлена")
    
    def pause(self):
        """Пауза стратегии."""
        self.status = StrategyStatus.PAUSED
        logger.info(f"Стратегия {self.name} приостановлена")
    
    def get_status_info(self) -> Dict[str, Any]:
        """Получение статуса стратегии."""
        return {
            "strategy_id": self.strategy_id,
            "name": self.name,
            "status": self.status.value,
            "created_at": self.created_at.isoformat(),
            "last_execution": self.last_execution.isoformat() if self.last_execution else None,
            "signals_generated": self.signals_generated,
            "supported_tickers": self.get_supported_tickers(),
            "description": self.get_description()
        }


class RSIMeanReversionStrategy(BaseStrategy):
    """
    RSI Mean Reversion стратегия.
    
    Покупает при RSI < 30 (oversold), продает при RSI > 70 (overbought).
    """
    
    def __init__(self, strategy_id: str = "rsi_mean_reversion"):
        config = {
            "rsi_oversold": 30,
            "rsi_overbought": 70,
            "rsi_period": 14,
            "supported_tickers": ["SBER", "GAZP", "YNDX", "LKOH"],
            "position_size_pct": 0.02  # 2% от портфеля
        }
        super().__init__(strategy_id, "RSI Mean Reversion", config)
    
    def get_description(self) -> str:
        """Описание стратегии."""
        return (f"Покупка при RSI < {self.config['rsi_oversold']}, "
                f"продажа при RSI > {self.config['rsi_overbought']}")
    
    async def generate_signal(self, ticker: str) -> Optional[TradingSignal]:
        """Генерация сигнала на основе RSI."""
        try:
            # Получаем технический анализ
            tech_data = self.technical_analyzer.get_comprehensive_analysis(ticker)
            
            if not tech_data or not tech_data.get("success"):
                logger.warning(f"Не удалось получить технические данные для {ticker}")
                return None
            
            rsi_value = tech_data["indicators"]["rsi"]["value"]
            rsi_signal = tech_data["indicators"]["rsi"]["signal"]
            
            # Логика стратегии
            action = "HOLD"
            confidence = 0.5
            
            if rsi_value < self.config["rsi_oversold"]:
                action = "BUY"
                confidence = min(0.9, (self.config["rsi_oversold"] - rsi_value) / 20)
            elif rsi_value > self.config["rsi_overbought"]:
                action = "SELL" 
                confidence = min(0.9, (rsi_value - self.config["rsi_overbought"]) / 20)
            
            # Создаем сигнал
            signal = TradingSignal(
                ticker=ticker,
                action=action,
                confidence=confidence
            )
            signal.strategy_id = self.strategy_id
            
            # Обновляем метрики
            self.last_execution = datetime.now()
            if action != "HOLD":
                self.signals_generated += 1
            
            logger.info(f"RSI стратегия {ticker}: RSI={rsi_value:.1f}, сигнал={action}, уверенность={confidence:.2f}")
            
            return signal
            
        except Exception as e:
            logger.error(f"Ошибка в RSI стратегии для {ticker}: {e}")
            self.status = StrategyStatus.ERROR
            return None


class MACDTrendFollowingStrategy(BaseStrategy):
    """
    MACD Trend Following стратегия.
    
    Следует трендам на основе сигналов MACD.
    """
    
    def __init__(self, strategy_id: str = "macd_trend_following"):
        config = {
            "macd_fast": 12,
            "macd_slow": 26,
            "macd_signal": 9,
            "supported_tickers": ["SBER", "GAZP", "YNDX", "LKOH", "ROSN"],
            "position_size_pct": 0.03  # 3% от портфеля
        }
        super().__init__(strategy_id, "MACD Trend Follow