–°–æ–∑–¥–∞–π —Ñ–∞–π–ª src/morning_brief.py —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –±—Ä–∏—Ñ–∏–Ω–≥–æ–≤. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∫–ª–∞—Å—Å MorningBriefGenerator —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–æ—á—å –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

```python
"""
Morning Brief System –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–£—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RSS –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import json

logger = logging.getLogger(__name__)

@dataclass
class MorningBriefData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
    date: str
    market_sentiment: float  # -1.0 to 1.0
    top_news: List[Dict[str, Any]]
    technical_signals: Dict[str, Dict[str, Any]]
    trading_recommendations: List[Dict[str, Any]]
    market_overview: str
    risk_alerts: List[str]
    portfolio_status: Optional[Dict[str, Any]] = None

class MorningBriefGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ç—Ä–µ–Ω–Ω–∏—Ö –±—Ä–∏—Ñ–∏–Ω–≥–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        # –ò–º–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è RSS parser
        self.top_tickers = ["SBER", "GAZP", "YNDX", "LKOH", "ROSN"]
        self.overnight_hours = 12  # –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
        
    async def generate_morning_brief(self, user_id: Optional[str] = None) -> MorningBriefData:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            MorningBriefData: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–∏—Ñ–∏–Ω–≥–∞
        """
        logger.info("–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞...")
        
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            brief_data = MorningBriefData(
                date=datetime.now().strftime("%Y-%m-%d"),
                market_sentiment=0.0,
                top_news=[],
                technical_signals={},
                trading_recommendations=[],
                market_overview="–°–∏—Å—Ç–µ–º–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –±—Ä–∏—Ñ–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. RSS parser –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
                risk_alerts=["‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"],
                portfolio_status=None
            )
            
            logger.info("–£—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return brief_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞: {e}")
            raise

def format_morning_brief_for_telegram(brief: MorningBriefData) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
    sentiment_emoji = "üìà" if brief.market_sentiment > 0.2 else "üìâ" if brief.market_sentiment < -0.2 else "‚û°Ô∏è"
    
    text = f"""üåÖ *–£–¢–†–ï–ù–ù–ò–ô –ë–†–ò–§–ò–ù–ì* - {brief.date}

{sentiment_emoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞:* {brief.market_sentiment:.2f} """
    
    if brief.market_sentiment > 0.2:
        text += "(–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ)"
    elif brief.market_sentiment < -0.2:
        text += "(–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ)"
    else:
        text += "(–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ)"
    
    text += f"\n\nüìù *–û–ë–ó–û–†:*\n{brief.market_overview}"
    
    if brief.risk_alerts:
        text += f"\n\n‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:*\n"
        for alert in brief.risk_alerts:
            text += f"‚Ä¢ {alert}\n"
    
    text += f"\n\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}"
    
    return text

# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram
async def get_morning_brief_for_telegram(user_id: Optional[str] = None) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram"""
    try:
        generator = MorningBriefGenerator()
        brief = await generator.generate_morning_brief(user_id)
        return format_morning_brief_for_telegram(brief)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞: {str(e)}"

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    async def test_morning_brief():
        generator = MorningBriefGenerator()
        brief = await generator.generate_morning_brief()
        formatted = format_morning_brief_for_telegram(brief)
        print(formatted)
    
    asyncio.run(test_morning_brief())