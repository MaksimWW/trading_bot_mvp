–í —Ñ–∞–π–ª–µ src/portfolio_coordinator.py –Ω–∞–π–¥–∏ —Ñ—É–Ω–∫—Ü–∏—é _sync_with_strategy_engine (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 252) –∏ –∑–∞–º–µ–Ω–∏ –µ—ë –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:

    async def _sync_with_strategy_engine(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Strategy Engine –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Strategy Engine")
        try:
            strategy_engine = self._get_strategy_engine_instance()
            strategies = self._get_strategies_from_engine(strategy_engine)
            self._process_strategy_sync(strategies)
            self._add_strategies_to_portfolio()
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(self.strategy_allocations)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Strategy Engine: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")

    def _get_strategy_engine_instance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Strategy Engine."""
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º Strategy Engine instance")
        strategy_engine = get_strategy_engine()
        logger.info(f"‚úÖ Strategy Engine –ø–æ–ª—É—á–µ–Ω: {type(strategy_engine)}")
        return strategy_engine

    def _get_strategies_from_engine(self, strategy_engine):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ engine."""
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        strategies = strategy_engine.get_all_strategies()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")
        return strategies

    def _process_strategy_sync(self, strategies):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        for strategy_id, strategy in strategies.items():
            logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_id}")
        
        all_strategies = self.strategy_engine.strategies
        for strategy_id, strategy_obj in all_strategies.items():
            active_tickers = getattr(strategy_obj, "active_tickers", [])
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}: {len(active_tickers)} —Ç–∏–∫–µ—Ä–æ–≤ ({active_tickers})")
            if active_tickers:
                logger.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è")

    def _add_strategies_to_portfolio(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."""
        logger.info(f"Strategy Engine —Å–æ–¥–µ—Ä–∂–∏—Ç {len(self.active_strategies)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        
        for strategy_id, strategy_obj in self.active_strategies.items():
            active_tickers = getattr(strategy_obj, "active_tickers", ["SBER"])
            
            for ticker in active_tickers:
                allocation_key = f"{strategy_id}_{ticker}"
                if allocation_key not in self.strategy_allocations:
                    success = self.add_strategy_to_portfolio(strategy_id, ticker)
                    if success:
                        logger.info(f"Auto-sync: –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {allocation_key}")