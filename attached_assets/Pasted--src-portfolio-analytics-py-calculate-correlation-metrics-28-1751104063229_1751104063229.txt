Отредактируй файл src/portfolio_analytics.py. Найди метод _calculate_correlation_metrics (строка ~285) и разбей его на более простые функции. Замени весь метод на:

    def _calculate_correlation_metrics(self, historical_data: Dict[str, List[float]]) -> Dict:
        """Расчет метрик корреляции"""
        if len(historical_data) < 2:
            return {"avg_correlation": 0.0, "diversification_ratio": 1.0}
        
        returns_data = self._calculate_ticker_returns(historical_data)
        correlations = self._calculate_pairwise_correlations(returns_data)
        
        avg_correlation = sum(correlations) / len(correlations) if correlations else 0.0
        diversification_ratio = 1.0 / (1.0 + avg_correlation) if avg_correlation > -1 else 1.0
        
        return {
            "avg_correlation": avg_correlation,
            "diversification_ratio": diversification_ratio
        }
    
    def _calculate_ticker_returns(self, historical_data: Dict[str, List[float]]) -> Dict[str, List[float]]:
        """Расчет доходности по тикерам"""
        returns_data = {}
        
        for ticker, ticker_data in historical_data.items():
            if len(ticker_data) > 1:
                daily_returns = []
                for i in range(1, len(ticker_data)):
                    prev_price = float(ticker_data[i-1]) if ticker_data[i-1] != 0 else 0.0
                    curr_price = float(ticker_data[i])
                    
                    if prev_price != 0:
                        ret = (curr_price / prev_price) - 1
                        daily_returns.append(ret)
                
                if daily_returns:
                    returns_data[ticker] = daily_returns
        
        return returns_data
    
    def _calculate_pairwise_correlations(self, returns_data: Dict[str, List[float]]) -> List[float]:
        """Расчет попарных корреляций"""
        correlations = []
        tickers = list(returns_data.keys())
        
        for i in range(len(tickers)):
            for j in range(i + 1, len(tickers)):
                ticker1, ticker2 = tickers[i], tickers[j]
                returns1, returns2 = returns_data[ticker1], returns_data[ticker2]
                
                min_len = min(len(returns1), len(returns2))
                if min_len > 1:
                    r1 = returns1[-min_len:]
                    r2 = returns2[-min_len:]
                    correlation = self._calculate_correlation(r1, r2)
                    if correlation is not None:
                        correlations.append(correlation)
        
        return correlations