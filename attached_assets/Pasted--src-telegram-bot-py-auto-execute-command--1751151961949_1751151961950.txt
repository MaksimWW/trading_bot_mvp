–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª src/telegram_bot.py. –ù–∞–π–¥–∏ –º–µ—Ç–æ–¥ auto_execute_command –∏ –¥–æ–±–∞–≤—å –ø–µ—Ä–µ–¥ –Ω–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã:

    def _handle_ticker_list(self, executor) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤."""
        status = executor.get_execution_status()
        enabled_tickers = status.get('enabled_tickers', [])
        
        text = "üìã *–¢–ò–ö–ï–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"
        if enabled_tickers:
            text += "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n"
            for ticker in enabled_tickers:
                text += f"  ‚Ä¢ {ticker}\n"
        else:
            text += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n"
        text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auto_execute TICKER` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        return text
    
    def _handle_ticker_remove(self, executor, ticker: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞."""
        success = executor.remove_ticker_from_execution(ticker)
        if success:
            return f"‚úÖ –¢–∏–∫–µ—Ä *{ticker}* —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}"
    
    def _handle_ticker_add(self, executor, ticker: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞."""
        supported_tickers = ["SBER", "GAZP", "YNDX", "LKOH", "ROSN", "NVTK", "GMKN"]
        
        if ticker not in supported_tickers:
            text = f"‚ùå –¢–∏–∫–µ—Ä {ticker} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
            text += f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(supported_tickers)}"
            return text
        
        success = executor.add_ticker_for_execution(ticker)
        if success:
            text = f"‚úÖ *{ticker}* –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            text += f"ü§ñ –¢–µ–ø–µ—Ä—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {ticker} –±—É–¥—É—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            text += "‚öôÔ∏è –ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
            text += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `/execution_status`"
            return text
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}"

–ó–∞—Ç–µ–º –Ω–∞–π–¥–∏ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞ auto_execute_command –∏ –∑–∞–º–µ–Ω–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞:

    async def auto_execute_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_execute TICKER."""
        if not context.args:
            await update.message.reply_text(
                "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/auto_execute SBER` - –¥–æ–±–∞–≤–∏—Ç—å SBER –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é\n"
                "‚Ä¢ `/auto_execute remove SBER` - —É–±—Ä–∞—Ç—å SBER –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n"
                "‚Ä¢ `/auto_execute list` - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã: SBER, GAZP, YNDX, LKOH, ROSN, NVTK, GMKN",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        try:
            from strategy_executor import get_strategy_executor
            executor = get_strategy_executor()
            
            if context.args[0].lower() == "list":
                text = self._handle_ticker_list(executor)
            elif len(context.args) >= 2 and context.args[0].lower() == "remove":
                ticker = context.args[1].upper()
                text = self._handle_ticker_remove(executor, ticker)
            else:
                ticker = context.args[0].upper()
                text = self._handle_ticker_add(executor, ticker)
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞–º–∏: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Auto execute command error: {e}")

–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.