"""
Клиент для работы с Perplexity API
Поиск финансовых новостей в реальном времени
"""

import requests
import json
import logging
import time
from typing import List, Dict, Optional
from datetime import datetime, timedelta

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class PerplexityError(Exception):
    """Кастомное исключение для ошибок Perplexity API"""
    pass


class PerplexityClient:
    """Клиент для работы с Perplexity API"""
    
    def __init__(self, api_key: str):
        """
        Инициализация клиента
        
        Args:
            api_key: API ключ Perplexity
        """
        if not api_key:
            raise ValueError("API ключ Perplexity не может быть пустым")
            
        self.api_key = api_key
        self.base_url = "https://api.perplexity.ai"
        self.model = "sonar-medium-online"
        self.timeout = 30
        self.max_retries = 3
        self.retry_delay = 1
        
        logger.info("PerplexityClient инициализирован")
    
    def search_ticker_news(self, ticker: str, hours: int = 24) -> List[Dict]:
        """
        Поиск новостей по тикеру за последние N часов
        
        Args:
            ticker: Тикер акции (например, SBER, GAZP, YNDX)
            hours: Количество часов для поиска (по умолчанию 24)
            
        Returns:
            Список словарей с новостями
        """
        if not ticker:
            raise ValueError("Тикер не может быть пустым")
        
        logger.info(f"Поиск новостей для тикера {ticker} за последние {hours} часов")
        
        query = self._build_search_query(ticker, hours)
        
        for attempt in range(self.max_retries):
            try:
                response = self._make_request(query)
                news_data = self._parse_response(response)
                
                logger.info(f"Найдено {len(news_data)} новостей для {ticker}")
                return news_data
                
            except PerplexityError as e:
                logger.warning(f"Попытка {attempt + 1}/{self.max_retries} не удалась: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)
                else:
                    logger.error(f"Все попытки исчерпаны для {ticker}")
                    raise
        
        return []
    
    def _build_search_query(self, ticker: str, hours: int) -> str:
        """
        Построение оптимального поискового запроса
        
        Args:
            ticker: Тикер акции
            hours: Количество часов
            
        Returns:
            Поисковый запрос
        """
        # Расширяем поиск для лучшего покрытия
        company_names = {
            'SBER': 'Сбербанк Сбер',
            'GAZP': 'Газпром',
            'YNDX': 'Яндекс Yandex',
            'LKOH': 'Лукойл',
            'NVTK': 'Новатэк',
            'ROSN': 'Роснефть',
            'MGNT': 'Магнит',
            'MTSS': 'МТС',
            'AFLT': 'Аэрофлот'
        }
        
        company = company_names.get(ticker.upper(), ticker)
        
        query = f"""
        Найди последние финансовые новости за {hours} часов о компании {company} ({ticker}).
        Интересуют: финансовые результаты, котировки акций, важные корпоративные события,
        слияния и поглощения, регуляторные решения, аналитические прогнозы.
        Фокус на российском рынке, но включи международные новости если они влияют на компанию.
        """
        
        logger.debug(f"Построен запрос: {query[:100]}...")
        return query
    
    def _make_request(self, query: str) -> Dict:
        """
        Выполнение запроса к Perplexity API
        
        Args:
            query: Поисковый запрос
            
        Returns:
            Ответ API в формате словаря
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": self.model,
            "messages": [
                {
                    "role": "user",
                    "content": query
                }
            ],
            "return_citations": True,
            "search_domain_filter": ["perplexity.ai"],
            "temperature": 0.1,
            "max_tokens": 2000
        }
        
        try:
            logger.debug(f"Отправка запроса к {self.base_url}/chat/completions")
            
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=self.timeout
            )
            
            # Проверяем статус ответа
            if response.status_code == 401:
                raise PerplexityError("Неверный API ключ Perplexity")
            elif response.status_code == 429:
                raise PerplexityError("Превышен лимит запросов Perplexity API")
            elif response.status_code >= 400:
                raise PerplexityError(f"Ошибка API: {response.status_code} - {response.text}")
            
            response.raise_for_status()
            
            return response.json()
            
        except requests.exceptions.Timeout:
            raise PerplexityError(f"Таймаут запроса ({self.timeout}s)")
        except requests.exceptions.ConnectionError:
            raise PerplexityError("Ошибка подключения к Perplexity API")
        except requests.exceptions.RequestException as e:
            raise PerplexityError(f"Ошибка запроса: {str(e)}")
        except json.JSONDecodeError:
            raise PerplexityError("Некорректный JSON ответ от API")
    
    def _parse_response(self, response: Dict) -> List[Dict]:
        """
        Парсинг ответа Perplexity API
        
        Args:
            response: Ответ от API
            
        Returns:
            Список новостей в унифицированном формате
        """
        try:
            # Извлекаем основной контент
            content = response.get("choices", [{}])[0].get("message", {}).get("content", "")
            citations = response.get("citations", [])
            
            if not content:
                logger.warning("Пустой контент в ответе Perplexity")
                return []
            
            # Создаем структурированный ответ
            news_items = []
            
            # Основная новость из контента
            main_news = {
                "title": "Обзор новостей от Perplexity",
                "content": content,
                "source": "Perplexity AI",
                "url": "",
                "timestamp": datetime.now().isoformat(),
                "citations": citations,
                "type": "aggregated"
            }
            
            news_items.append(main_news)
            
            # Добавляем отдельные источники из citations
            for i, citation in enumerate(citations[:5]):  # Ограничиваем 5 источниками
                if isinstance(citation, str) and citation.startswith("http"):
                    citation_news = {
                        "title": f"Источник {i+1}",
                        "content": "",
                        "source": citation,
                        "url": citation,
                        "timestamp": datetime.now().isoformat(),
                        "type": "citation"
                    }
                    news_items.append(citation_news)
            
            logger.info(f"Обработано {len(news_items)} новостных элементов")
            return news_items
            
        except Exception as e:
            logger.error(f"Ошибка парсинга ответа: {e}")
            return []
    
    def test_connection(self) -> bool:
        """
        Тестирование подключения к Perplexity API
        
        Returns:
            True если подключение успешное, False иначе
        """
        try:
            logger.info("Тестирование подключения к Perplexity API...")
            
            # Простой тестовый запрос
            test_news = self.search_ticker_news("SBER", hours=1)
            
            if test_news:
                logger.info("✅ Подключение к Perplexity API успешно!")
                return True
            else:
                logger.warning("⚠️ Подключение есть, но новости не найдены")
                return True  # API работает, просто нет новостей
                
        except Exception as e:
            logger.error(f"❌ Ошибка подключения к Perplexity API: {e}")
            return False


def main():
    """Функция для тестирования клиента"""
    import os
    from dotenv import load_dotenv
    
    # Загружаем переменные окружения
    load_dotenv()
    
    api_key = os.getenv("PERPLEXITY_API_KEY")
    
    if not api_key:
        print("❌ PERPLEXITY_API_KEY не найден в .env файле!")
        return
    
    print("🔄 Тестирование Perplexity API...")
    
    try:
        client = PerplexityClient(api_key)
        
        # Тест подключения
        if client.test_connection():
            print("✅ Тест подключения прошел успешно!")
        else:
            print("❌ Тест подключения не прошел!")
            return
        
        # Тест поиска новостей
        print("\n🔍 Тестирование поиска новостей для SBER...")
        news = client.search_ticker_news("SBER", hours=24)
        
        if news:
            print(f"✅ Найдено {len(news)} новостей!")
            print("\n📰 Первая новость:")
            print(f"Заголовок: {news[0]['title']}")
            print(f"Источник: {news[0]['source']}")
            print(f"Содержание: {news[0]['content'][:200]}...")
        else:
            print("⚠️ Новости не найдены")
            
    except Exception as e:
        print(f"❌ Ошибка тестирования: {e}")


if __name__ == "__main__":
    main()