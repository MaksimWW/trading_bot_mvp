–ó–∞–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ src/strategy_state_manager.py –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:

"""
Strategy State Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞.
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List

logger = logging.getLogger(__name__)


class StrategyStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è persistence –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏."""
    
    def __init__(self, state_file: str = "strategy_state.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            state_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        self.state_file = Path(state_file)
        self.state = self._load_state()
        logger.info(f"Strategy State Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.state_file}")
    
    def _load_state(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        if self.state_file.exists():
            try:
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                return self._get_default_state()
        return self._get_default_state()
    
    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(self.state, f, ensure_ascii=False, indent=2)
            logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _get_default_state(self) -> Dict:
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return {
            "active_strategies": {},
            "strategy_history": [],
            "last_update": datetime.now().isoformat(),
            "version": "1.0"
        }
    
    def start_strategy(self, strategy_id: str, tickers: List[str]):
        """
        –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å strategy_engine.py).
        
        Args:
            strategy_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
        """
        self.state["active_strategies"][strategy_id] = {
            "tickers": tickers,
            "start_time": datetime.now().isoformat(),
            "status": "active"
        }
        self.state["last_update"] = datetime.now().isoformat()
        self._save_state()
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–ª—è {tickers}")
    
    def add_strategy(self, strategy_id: str, tickers: List[str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∞–ª–∏–∞—Å –¥–ª—è start_strategy)."""
        self.start_strategy(strategy_id, tickers)
    
    def stop_strategy(self, strategy_id: str, tickers: List[str] = None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤."""
        if strategy_id not in self.state["active_strategies"]:
            return
        
        if tickers is None:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            del self.state["active_strategies"][strategy_id]
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id}")
        else:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
            current_tickers = self.state["active_strategies"][strategy_id]["tickers"]
            remaining_tickers = [t for t in current_tickers if t not in tickers]
            
            if remaining_tickers:
                self.state["active_strategies"][strategy_id]["tickers"] = remaining_tickers
                logger.info(f"–ò–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id} —É–¥–∞–ª–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã {tickers}")
            else:
                del self.state["active_strategies"][strategy_id]
                logger.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        self.state["last_update"] = datetime.now().isoformat()
        self._save_state()
    
    def remove_strategy(self, strategy_id: str, tickers: List[str] = None):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∞–ª–∏–∞—Å –¥–ª—è stop_strategy)."""
        self.stop_strategy(strategy_id, tickers)
    
    def get_active_tickers(self, strategy_id: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        strategy = self.state["active_strategies"].get(strategy_id, {})
        return strategy.get("tickers", [])
    
    def get_all_active_strategies(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π."""
        result = {}
        for strategy_id, data in self.state["active_strategies"].items():
            result[strategy_id] = data["tickers"]
        return result
    
    def is_strategy_active(self, strategy_id: str, ticker: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        if strategy_id not in self.state["active_strategies"]:
            return False
        
        if ticker is None:
            return True
        
        tickers = self.state["active_strategies"][strategy_id]["tickers"]
        return ticker in tickers
    
    def get_state_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        active_count = len(self.state["active_strategies"])
        total_tickers = sum(
            len(data["tickers"]) 
            for data in self.state["active_strategies"].values()
        )
        
        return {
            "active_strategies_count": active_count,
            "total_active_tickers": total_tickers,
            "strategies": list(self.state["active_strategies"].keys()),
            "last_update": self.state["last_update"]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_state_manager = None


def get_strategy_state_manager() -> StrategyStateManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    global _global_state_manager
    if _global_state_manager is None:
        _global_state_manager = StrategyStateManager()
    return _global_state_manager


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Strategy State Manager."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Strategy State Manager...")
    
    manager = get_strategy_state_manager()
    
    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å strategy_engine)
    manager.start_strategy("rsi_strategy", ["SBER", "GAZP"])
    manager.start_strategy("macd_strategy", ["YNDX"])
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", manager.get_all_active_strategies())
    print("–°–≤–æ–¥–∫–∞:", manager.get_state_summary())
    
    # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
    manager.stop_strategy("rsi_strategy", ["GAZP"])
    print("–ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ GAZP:", manager.get_all_active_strategies())
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    manager.stop_strategy("macd_strategy")
    print("–ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD:", manager.get_all_active_strategies())
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()