–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª src/portfolio_manager.py. –ù–∞–π–¥–∏ –º–µ—Ç–æ–¥ sell_stock –∏ –∑–∞–º–µ–Ω–∏ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞:

    async def sell_stock(self, ticker: str, quantity: int,
                        price: Optional[float] = None) -> Dict:
        """
        –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π.
        
        Args:
            ticker: –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
            price: –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∑–∏—Ü–∏–∏
            if ticker not in self.positions:
                return {"success": False, "error": f"–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {ticker}"}
            
            position = self.positions[ticker]
            if position.quantity < quantity:
                return {
                    "success": False, 
                    "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ü–∏–π {ticker}: –µ—Å—Ç—å {position.quantity}, –Ω—É–∂–Ω–æ {quantity}"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            if price is None:
                instrument = self.tinkoff.search_instrument(ticker)
                if not instrument:
                    return {"success": False, "error": f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                price_data = self.tinkoff.get_last_price(instrument["figi"])
                if not price_data:
                    return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {ticker}"}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ Quotation –æ–±—ä–µ–∫—Ç–∞
                price = float(price_data.price.units + price_data.price.nano / 1_000_000_000)
            
            # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∏ –æ–±—â–µ–π —Å—É–º–º—ã
            commission = quantity * price * self.default_commission_rate
            total_revenue = quantity * price - commission
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–π —á–∞—Å—Ç–∏
            avg_cost_per_share = position.avg_price
            cost_basis_sold = quantity * avg_cost_per_share
            realized_pnl = (quantity * price) - cost_basis_sold - commission
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
            trade_id = f"SELL_{ticker}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            trade = Trade(
                trade_id=trade_id,
                ticker=ticker,
                action="SELL",
                quantity=quantity,
                price=price,
                timestamp=datetime.now().isoformat(),
                commission=commission
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            self.cash_balance += total_revenue
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._update_position_after_sell(ticker, quantity)
            
            # –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏
            self.trades.append(trade)
            
            logger.info(f"–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {quantity} {ticker} –ø–æ {price:.2f} ‚ÇΩ")
            
            return {
                "success": True,
                "trade_id": trade_id,
                "ticker": ticker,
                "action": "SELL",
                "quantity": quantity,
                "price": price,
                "commission": commission,
                "total_revenue": total_revenue,
                "realized_pnl": realized_pnl,
                "new_cash_balance": self.cash_balance,
                "remaining_quantity": self.positions.get(ticker, Position("", "", "", 0, 0, 0, "", "")).quantity
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ {ticker}: {e}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {str(e)}"}
    
    async def _update_position_after_sell(self, ticker: str, quantity: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏."""
        position = self.positions[ticker]
        position.quantity -= quantity
        position.last_update = datetime.now().isoformat()
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –∞–∫—Ü–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        if position.quantity <= 0:
            del self.positions[ticker]

–ó–∞—Ç–µ–º –Ω–∞–π–¥–∏ –≤ —Ñ–∞–π–ª–µ src/telegram_bot.py –º–µ—Ç–æ–¥ sell_command –∏ –∑–∞–º–µ–Ω–∏ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞:

    async def sell_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell TICKER QUANTITY."""
        if len(context.args) < 2:
            await update.message.reply_text(
                "üìà *–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/sell TICKER QUANTITY`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/sell SBER 25` - –ø—Ä–æ–¥–∞—Ç—å 25 –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
                "‚Ä¢ `/sell GAZP 30` - –ø—Ä–æ–¥–∞—Ç—å 30 –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞\n\n"
                "üí° –ü—Ä–æ–¥–∞–∂–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ\n"
                "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        ticker = context.args[0].upper()
        try:
            quantity = int(context.args[1])
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        if quantity <= 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        loading_msg = await update.message.reply_text(
            f"üìà –ü—Ä–æ–¥–∞—é {quantity} –∞–∫—Ü–∏–π {ticker}...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            result = await self.portfolio.sell_stock(ticker, quantity)
            
            if result["success"]:
                realized_pnl = result['realized_pnl']
                pnl_emoji = "üíö" if realized_pnl >= 0 else "‚ù§Ô∏è"
                pnl_sign = "+" if realized_pnl >= 0 else ""
                remaining = result.get('remaining_quantity', 0)
                
                sell_text = f"""
üìà *–ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê*

üéØ *–ê–∫—Ü–∏—è:* {ticker}
üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {result['quantity']} —à—Ç
üíµ *–¶–µ–Ω–∞:* {result['price']:.2f} ‚ÇΩ
üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* {result['commission']:.2f} ‚ÇΩ
üí≥ *–ü–æ–ª—É—á–µ–Ω–æ:* {result['total_revenue']:,.0f} ‚ÇΩ

{pnl_emoji} *–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:* {pnl_sign}{realized_pnl:,.0f} ‚ÇΩ

üí∞ *–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏:* {result['new_cash_balance']:,.0f} ‚ÇΩ
üìä *–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ü–∏–π {ticker}:* {remaining} —à—Ç

üéâ –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç!

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                """
            else:
                sell_text = f"""
‚ùå *–û–®–ò–ë–ö–ê –ü–†–û–î–ê–ñ–ò*

üéØ *–ê–∫—Ü–∏—è:* {ticker}
üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity} —à—Ç

‚ùå *–ü—Ä–∏—á–∏–Ω–∞:* {result['error']}

üí° *–°–æ–≤–µ—Ç—ã:*
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ü–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/portfolio` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π
                """
            
            await loading_msg.edit_text(
                sell_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ {ticker}: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Sell command error for {ticker}: {e}")