"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
"""

import logging
import os
from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    ContextTypes,
    MessageHandler,
    filters
)
from config import Config
from tinkoff_client import TinkoffClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TradingTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.config = Config()
        self.tinkoff_client = TinkoffClient()
        self.application = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        welcome_message = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trading Bot MVP!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
/price SBER - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ SBER
/accounts - –≤–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        help_message = """
üìã **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

üí∞ **–î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞:**
/price TICKER - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price SBER)
/accounts - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤

üöÄ **–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º:**
- –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã  
- –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        await update.message.reply_text(help_message, parse_mode='Markdown')
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API
            await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff
            test_result = self.tinkoff_client.test_connection()
            
            if test_result:
                status_message = """
‚úÖ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**

üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Tinkoff Invest API - –ø–æ–¥–∫–ª—é—á–µ–Ω
‚úÖ –ü–µ—Å–æ—á–Ω–∏—Ü–∞ - –∞–∫—Ç–∏–≤–Ω–∞

‚öôÔ∏è **–†–µ–∂–∏–º:** –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üìä **–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
                """
            else:
                status_message = """
‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º**

üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚úÖ Telegram Bot API - —Ä–∞–±–æ—Ç–∞–µ—Ç  
‚ùå Tinkoff Invest API - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
                """
                
            await update.message.reply_text(status_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /price TICKER - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∏–∫–µ—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
            if not context.args:
                await update.message.reply_text(
                    "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/price SBER`", 
                    parse_mode='Markdown'
                )
                return
                
            ticker = context.args[0].upper()
            await update.message.reply_text(f"üîç –ò—â—É —Ü–µ–Ω—É –¥–ª—è {ticker}...")
            
            # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            instrument = self.tinkoff_client.search_instrument(ticker)
            
            if not instrument:
                await update.message.reply_text(
                    f"‚ùå –ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä."
                )
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price = self.tinkoff_client.get_last_price(instrument['figi'])
            
            price_message = f"""
üí∞ **{instrument['name']}**

üìä **–¶–µ–Ω–∞:** {price} ‚ÇΩ
üéØ **–¢–∏–∫–µ—Ä:** {ticker}
üîó **FIGI:** {instrument['figi']}

‚è∞ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: —Å–µ–π—á–∞—Å
üèõÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫: Tinkoff Invest API (–ø–µ—Å–æ—á–Ω–∏—Ü–∞)
            """
            
            await update.message.reply_text(price_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ price: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {ticker if 'ticker' in locals() else '–∞–∫—Ü–∏–∏'}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /accounts - —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤"""
        try:
            await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–∞—Ö...")
            
            accounts = self.tinkoff_client.get_accounts()
            
            if not accounts:
                await update.message.reply_text("‚ùå –¢–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
                
            accounts_message = "üíº **–í–∞—à–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—á–µ—Ç–∞:**\n\n"
            
            for i, account in enumerate(accounts, 1):
                account_id = account.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                account_name = account.get('name', '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç')
                
                accounts_message += f"""
**–°—á–µ—Ç {i}:**
üÜî ID: `{account_id[:8]}...`
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {account_name}
üèõÔ∏è –¢–∏–ø: –ü–µ—Å–æ—á–Ω–∏—Ü–∞

---
                """
                
            accounts_message += "\n‚ö†Ô∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Å–æ—á–Ω–∏—Ü–µ."
            
            await update.message.reply_text(accounts_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ accounts: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = """
‚ùì **–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/price SBER - —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏  
/status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
        """
        await update.message.reply_text(message, parse_mode='Markdown')
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("price", self.price_command))
        self.application.add_handler(CommandHandler("accounts", self.accounts_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.unknown_command)
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.config.telegram_token).build()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            
            logger.info("ü§ñ Trading Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
            logger.info(f"üîó –í–∞—à –±–æ—Ç: @max_trading_mvp_bot")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    bot = TradingTelegramBot()
    bot.run()


if __name__ == "__main__":
    main()