–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª src/telegram_bot.py. –ù–∞–π–¥–∏ –º–µ—Ç–æ–¥ setup_handlers –∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ CommandHandler –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:

        # Strategy Executor –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("auto_trading", self.auto_trading_command))
        app.add_handler(CommandHandler("auto_execute", self.auto_execute_command))
        app.add_handler(CommandHandler("execution_status", self.execution_status_command))
        app.add_handler(CommandHandler("auto_settings", self.auto_settings_command))

–ò –¥–æ–±–∞–≤—å —ç—Ç–∏ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å TradingTelegramBot –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–æ–º setup_handlers:

    async def auto_trading_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_trading on/off."""
        if not context.args:
            await update.message.reply_text(
                "üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/auto_trading on` - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
                "‚Ä¢ `/auto_trading off` - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
                "‚Ä¢ `/auto_trading status` - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n\n"
                "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        action = context.args[0].lower()
        
        try:
            from strategy_executor import get_strategy_executor
            executor = get_strategy_executor()
            
            if action == "on":
                from strategy_executor import ExecutionMode
                success = executor.enable_auto_trading(ExecutionMode.AUTOMATIC)
                if success:
                    text = "ü§ñ *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ê*\n\n"
                    text += "‚úÖ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
                    text += f"‚öôÔ∏è –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {executor.min_confidence_threshold:.1%}\n"
                    text += f"üéØ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {executor.max_position_size_pct:.1%}\n\n"
                    text += "üí° *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n"
                    text += "‚Ä¢ `/auto_execute SBER` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
                    text += "‚Ä¢ `/execution_status` - —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π\n"
                    text += "‚Ä¢ `/auto_settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                else:
                    text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"
                    
            elif action == "off":
                success = executor.disable_auto_trading()
                if success:
                    text = "‚èπÔ∏è *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø –í–´–ö–õ–Æ–ß–ï–ù–ê*\n\n"
                    text += "üîí –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                    text += "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
                    text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auto_trading on` –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è"
                else:
                    text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"
                    
            elif action == "status":
                status = executor.get_execution_status()
                mode = status.get('execution_mode', 'unknown')
                enabled_tickers = status.get('enabled_tickers', [])
                daily_executions = status.get('daily_executions', 0)
                max_daily = status.get('max_daily_trades', 5)
                
                text = f"üìä *–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–û–†–ì–û–í–õ–ò*\n\n"
                text += f"üîÑ –†–µ–∂–∏–º: {mode.upper()}\n"
                text += f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(enabled_tickers)}\n"
                if enabled_tickers:
                    text += f"üéØ –¢–∏–∫–µ—Ä—ã: {', '.join(enabled_tickers)}\n"
                text += f"üìä –°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {daily_executions}/{max_daily}\n"
                text += f"‚öôÔ∏è –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status.get('min_confidence_threshold', 0):.1%}"
            else:
                text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on, off, status"
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Auto trading command error: {e}")

    async def auto_execute_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_execute TICKER."""
        if not context.args:
            await update.message.reply_text(
                "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º*\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/auto_execute SBER` - –¥–æ–±–∞–≤–∏—Ç—å SBER –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é\n"
                "‚Ä¢ `/auto_execute remove SBER` - —É–±—Ä–∞—Ç—å SBER –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n"
                "‚Ä¢ `/auto_execute list` - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–∫–µ—Ä—ã: SBER, GAZP, YNDX, LKOH, ROSN, NVTK, GMKN",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        try:
            from strategy_executor import get_strategy_executor
            executor = get_strategy_executor()
            
            if context.args[0].lower() == "list":
                status = executor.get_execution_status()
                enabled_tickers = status.get('enabled_tickers', [])
                
                text = "üìã *–¢–ò–ö–ï–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"
                if enabled_tickers:
                    text += "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:\n"
                    for ticker in enabled_tickers:
                        text += f"  ‚Ä¢ {ticker}\n"
                else:
                    text += "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤\n"
                text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auto_execute TICKER` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                
            elif len(context.args) >= 2 and context.args[0].lower() == "remove":
                ticker = context.args[1].upper()
                success = executor.remove_ticker_from_execution(ticker)
                if success:
                    text = f"‚úÖ –¢–∏–∫–µ—Ä *{ticker}* —É–¥–∞–ª–µ–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
                else:
                    text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}"
                    
            else:
                ticker = context.args[0].upper()
                supported_tickers = ["SBER", "GAZP", "YNDX", "LKOH", "ROSN", "NVTK", "GMKN"]
                
                if ticker not in supported_tickers:
                    text = f"‚ùå –¢–∏–∫–µ—Ä {ticker} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
                    text += f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(supported_tickers)}"
                else:
                    success = executor.add_ticker_for_execution(ticker)
                    if success:
                        text = f"‚úÖ *{ticker}* –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
                        text += f"ü§ñ –¢–µ–ø–µ—Ä—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {ticker} –±—É–¥—É—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                        text += f"‚öôÔ∏è –ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
                        text += f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `/execution_status`"
                    else:
                        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}"
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞–º–∏: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Auto execute command error: {e}")

    async def execution_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /execution_status."""
        try:
            from strategy_executor import get_strategy_executor
            executor = get_strategy_executor()
            
            status = executor.get_execution_status()
            
            text = "üìä *–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–û–õ–ù–ï–ù–ò–Ø*\n\n"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            mode = status.get('execution_mode', 'unknown')
            enabled_tickers = status.get('enabled_tickers', [])
            daily_executions = status.get('daily_executions', 0)
            max_daily = status.get('max_daily_trades', 5)
            total_executions = status.get('total_executions', 0)
            
            if mode == "automatic":
                text += "üü¢ –†–µ–∂–∏–º: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï\n"
            elif mode == "disabled":
                text += "üî¥ –†–µ–∂–∏–º: –û–¢–ö–õ–Æ–ß–ï–ù–û\n"
            else:
                text += f"üü° –†–µ–∂–∏–º: {mode.upper()}\n"
            
            text += f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(enabled_tickers)}\n"
            if enabled_tickers:
                text += f"üéØ –¢–∏–∫–µ—Ä—ã: {', '.join(enabled_tickers)}\n"
            
            text += f"üìä –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {daily_executions}/{max_daily}\n"
            text += f"üìà –í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {total_executions}\n"
            text += f"‚öôÔ∏è –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status.get('min_confidence_threshold', 0):.1%}\n\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            recent_executions = status.get('recent_executions', [])
            if recent_executions:
                text += "üìã *–ü–û–°–õ–ï–î–ù–ò–ï –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:*\n"
                for execution in recent_executions[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    ticker = execution.get('ticker', 'N/A')
                    action = execution.get('signal_action', 'N/A')
                    status_exec = execution.get('status', 'N/A')
                    confidence = execution.get('signal_confidence', 0)
                    
                    if status_exec == "executed":
                        emoji = "‚úÖ"
                    elif status_exec == "rejected":
                        emoji = "‚ö†Ô∏è"
                    else:
                        emoji = "‚ùå"
                    
                    text += f"{emoji} {ticker}: {action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})\n"
            else:
                text += "üìã *–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ*\n"
            
            text += "\nüí° *–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
            text += "‚Ä¢ `/auto_trading on/off` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n"
            text += "‚Ä¢ `/auto_execute TICKER` - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä\n"
            text += "‚Ä¢ `/auto_settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Execution status command error: {e}")

    async def auto_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auto_settings."""
        try:
            from strategy_executor import get_strategy_executor
            executor = get_strategy_executor()
            
            text = "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–û–†–ì–û–í–õ–ò*\n\n"
            
            text += "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
            text += f"‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {executor.min_confidence_threshold:.1%}\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {executor.max_position_size_pct:.1%}\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {executor.get_execution_status().get('max_daily_trades', 5)}\n\n"
            
            text += "üõ°Ô∏è *–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:*\n"
            text += "‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: 1,000,000 ‚ÇΩ\n"
            text += "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 0.05%\n"
            text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã\n\n"
            
            text += "ü§ñ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n"
            text += "‚Ä¢ RSI Mean Reversion\n"
            text += "‚Ä¢ MACD Trend Following\n\n"
            
            text += "üìä *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:*\n"
            text += "‚Ä¢ SBER - –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫\n"
            text += "‚Ä¢ GAZP - –ü–ê–û –ì–∞–∑–ø—Ä–æ–º\n"
            text += "‚Ä¢ YNDX - –Ø–Ω–¥–µ–∫—Å\n"
            text += "‚Ä¢ LKOH - –õ–£–ö–û–ô–õ\n"
            text += "‚Ä¢ ROSN - –†–æ—Å–Ω–µ—Ñ—Ç—å\n"
            text += "‚Ä¢ NVTK - –ù–û–í–ê–¢–≠–ö\n"
            text += "‚Ä¢ GMKN - –ì–ú–ö –ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å\n\n"
            
            text += "‚ö†Ô∏è *–í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
            text += "‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ Tinkoff\n"
            text += "‚Ä¢ –¢–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤\n\n"
            
            text += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            text += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞\n"
            text += "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ `/execution_status`\n"
            text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ `/portfolio`"
            
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Auto settings command error: {e}")

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π –≤ Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.