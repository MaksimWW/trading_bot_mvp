–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª src/telegram_bot.py. –ù–∞–π–¥–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –≥–¥–µ –∏–º–ø–æ—Ä—Ç—ã:

from src.portfolio_manager import PortfolioManager
from src.portfolio_analytics import PortfolioAnalytics

–ò –¥–æ–±–∞–≤—å –ø–æ—Å–ª–µ –Ω–∏—Ö:

from src.morning_brief import get_morning_brief_for_telegram

–ó–∞—Ç–µ–º –Ω–∞–π–¥–∏ –º–µ—Ç–æ–¥ help_command –∏ –¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:

- `/morning_brief` - –£—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ üåÖ

–ó–∞—Ç–µ–º –Ω–∞–π–¥–∏ —Å—Ç—Ä–æ–∫—É –≥–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–æ–±—ã—á–Ω–æ –≤ –º–µ—Ç–æ–¥–µ setup_handlers), –Ω–∞–π–¥–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:

        self.application.add_handler(CommandHandler("analytics", self.analytics_command))

–ò –¥–æ–±–∞–≤—å –ø–æ—Å–ª–µ –Ω–∏—Ö:

        self.application.add_handler(CommandHandler("morning_brief", self.morning_brief_command))

–ù–∞–∫–æ–Ω–µ—Ü, –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ morning_brief_command –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–æ–º unknown_command:

    async def morning_brief_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ö–æ–º–∞–Ω–¥–∞ /morning_brief - –£—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        """
        try:
            user_id = str(update.effective_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            loading_msg = await update.message.reply_text(
                "üåÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥...\n"
                "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫\n"
                "üéØ –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—Ä–∏—Ñ–∏–Ω–≥
            brief_text = await get_morning_brief_for_telegram(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await loading_msg.edit_text(
                brief_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"Morning brief —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            error_msg = (
                "‚ùå *–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—Ä–∏—Ñ–∏–Ω–≥–∞*\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å /status —Å–∏—Å—Ç–µ–º"
            )
            
            if 'loading_msg' in locals():
                await loading_msg.edit_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            else:
                await update.message.reply_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            
            logger.error(f"Morning brief command error: {e}")