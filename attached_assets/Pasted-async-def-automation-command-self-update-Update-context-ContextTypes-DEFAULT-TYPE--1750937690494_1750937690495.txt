async def automation_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /automation."""
        loading_msg = await update.message.reply_text(
            "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...\n"
            "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            trading_engine = TradingEngine(mode=TradingMode.PAPER)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            signal = await trading_engine.generate_trading_signal("SBER")
            
            result_text = f"ü§ñ *–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–õ–ò*\n\n"
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            result_text += f"‚öôÔ∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*\n"
            result_text += f"üü¢ –†–µ–∂–∏–º: {trading_engine.mode.value} (–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)\n"
            result_text += f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            result_text += f"üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            result_text += f"‚öñÔ∏è Risk Management: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            result_text += f"üéõÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:*\n"
            result_text += f"‚Ä¢ –ú–∏–Ω. —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {trading_engine.min_signal_strength.value}\n"
            result_text += f"‚Ä¢ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trading_engine.min_confidence:.1f}\n"
            result_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {trading_engine.scan_interval//60} –º–∏–Ω\n"
            result_text += f"‚Ä¢ –°–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {', '.join(trading_engine.watchlist)}\n\n"
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            if signal:
                emoji = "üü¢" if signal.direction == "BUY" else "üî¥" if signal.direction == "SELL" else "üü°"
                result_text += f"üéØ *–î–µ–º–æ-—Å–∏–≥–Ω–∞–ª {signal.ticker}:*\n"
                result_text += f"{emoji} –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal.direction}\n"
                result_text += f"üí™ –°–∏–ª–∞: {signal.strength.value}\n"
                result_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.0%}\n"
                result_text += f"üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal.reasoning}\n"
                result_text += f"üí∞ –í—Ö–æ–¥: {signal.entry_price:.2f} ‚ÇΩ\n"
                result_text += f"üõë –°—Ç–æ–ø: {signal.stop_loss:.2f} ‚ÇΩ\n"
                result_text += f"üéØ –¶–µ–ª—å: {signal.take_profit:.2f} ‚ÇΩ\n\n"
            else:
                result_text += f"üìä *–¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã:*\n"
                result_text += f"‚ùå –ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n"
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            result_text += f"üöÄ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*\n"
            result_text += f"üìù **MANUAL** - –†—É—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            result_text += f"üîÑ **SEMI_AUTO** - –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n"
            result_text += f"üìä **PAPER** - –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (—Ç–µ–∫—É—â–∏–π)\n"
            result_text += f"ü§ñ **AUTO** - –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (—Å–∫–æ—Ä–æ)\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result_text += f"üìà *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:*\n"
            result_text += f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: 2-4 —á–∞—Å–∞/–¥–µ–Ω—å\n"
            result_text += f"‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π\n"
            result_text += f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: –†–µ–∞–∫—Ü–∏—è –∑–∞ —Å–µ–∫—É–Ω–¥—ã\n"
            result_text += f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å: 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            
            # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            result_text += f"*üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n"
            result_text += f"‚Ä¢ `/scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞\n"
            result_text += f"‚Ä¢ `/morning_brief` - —É—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑\n"
            result_text += f"‚Ä¢ `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n\n"
            
            result_text += f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. "
            result_text += f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."

            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info("–ö–æ–º–∞–Ω–¥–∞ /automation –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Automation command error: {e}")

    async def scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan."""
        loading_msg = await update.message.reply_text(
            "üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...\n"
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–∏–∫–µ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...",
            parse_mode=ParseMode.MARKDOWN
        )

        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
            trading_engine = TradingEngine(mode=TradingMode.PAPER)
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
            quick_watchlist = trading_engine.watchlist[:3]
            signals = []
            
            for ticker in quick_watchlist:
                try:
                    signal = await trading_engine.generate_trading_signal(ticker)
                    if signal:
                        signals.append(signal)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {ticker}: {e}")
                    continue
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_text = f"üîç *–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–´–ù–ö–ê*\n\n"
            result_text += f"‚è∞ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n"
            result_text += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(quick_watchlist)}\n"
            result_text += f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}\n\n"
            
            if signals:
                result_text += f"üìà *–ù–ê–ô–î–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´:*\n\n"
                
                for i, signal in enumerate(signals, 1):
                    emoji = "üü¢" if signal.direction == "BUY" else "üî¥" if signal.direction == "SELL" else "üü°"
                    
                    result_text += f"*{i}. {signal.ticker}*\n"
                    result_text += f"{emoji} {signal.direction} ‚Ä¢ {signal.strength.value}\n"
                    result_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.0%}\n"
                    result_text += f"üí∞ –¶–µ–Ω–∞: {signal.entry_price:.2f} ‚ÇΩ\n"
                    result_text += f"üìù {signal.reasoning[:50]}...\n\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                result_text += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                buy_signals = [s for s in signals if s.direction == "BUY"]
                sell_signals = [s for s in signals if s.direction == "SELL"]
                
                if buy_signals:
                    best_buy = max(buy_signals, key=lambda x: x.confidence)
                    result_text += f"‚Ä¢ –õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: {best_buy.ticker}\n"
                
                if sell_signals:
                    best_sell = max(sell_signals, key=lambda x: x.confidence)
                    result_text += f"‚Ä¢ –õ—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {best_sell.ticker}\n"
                
            else:
                result_text += f"üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:*\n"
                result_text += f"‚ùå –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n\n"
                result_text += f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(quick_watchlist)}\n"
                result_text += f"‚è≥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30-60 –º–∏–Ω—É—Ç\n\n"
                
                result_text += f"üí° *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                result_text += f"‚Ä¢ –†—ã–Ω–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏\n"
                result_text += f"‚Ä¢ –°–ª–∞–±—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã\n"
                result_text += f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω\n"
            
            result_text += f"\n*üîÑ –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
            result_text += f"‚Ä¢ `/risk TICKER` - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤\n"
            result_text += f"‚Ä¢ `/automation` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
            result_text += f"‚Ä¢ `/portfolio` - —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n\n"
            
            result_text += f"‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. "
            result_text += f"–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π."

            await loading_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

        except Exception as e:
            error_msg = f"‚ùå *–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞*\n\n"
            error_msg += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            error_msg += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
            await loading_msg.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.error(f"Scan command error: {e}")